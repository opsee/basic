// Code generated by protoc-gen-gogo.
// source: user.proto
// DO NOT EDIT!

package schema

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/opsee/protobuf/proto/google/protobuf"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/opsee/protobuf/opseeproto"

import github_com_graphql_go_graphql "github.com/graphql-go/graphql"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type User struct {
	Id         int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CustomerId string `protobuf:"bytes,2,opt,name=customer_id,proto3" json:"customer_id,omitempty"`
	Email      string `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
	Name       string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Verified   bool   `protobuf:"varint,5,opt,name=verified,proto3" json:"verified,omitempty"`
	Admin      bool   `protobuf:"varint,6,opt,name=admin,proto3" json:"admin,omitempty"`
	Active     bool   `protobuf:"varint,7,opt,name=active,proto3" json:"active,omitempty"`
}

func (m *User) Reset()         { *m = User{} }
func (m *User) String() string { return proto.CompactTextString(m) }
func (*User) ProtoMessage()    {}

func init() {
	proto.RegisterType((*User)(nil), "opsee.User")
}
func (this *User) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*User)
	if !ok {
		that2, ok := that.(User)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.CustomerId != that1.CustomerId {
		return false
	}
	if this.Email != that1.Email {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Verified != that1.Verified {
		return false
	}
	if this.Admin != that1.Admin {
		return false
	}
	if this.Active != that1.Active {
		return false
	}
	return true
}

type UserGetter interface {
	GetUser() *User
}

var GraphQLUserType *github_com_graphql_go_graphql.Object

func init() {
	GraphQLUserType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "schemaUser",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"id": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*User)
						if ok {
							return obj.Id, nil
						}
						inter, ok := p.Source.(UserGetter)
						if ok {
							face := inter.GetUser()
							if face == nil {
								return nil, nil
							}
							return face.Id, nil
						}
						return nil, fmt.Errorf("field id not resolved")
					},
				},
				"customer_id": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*User)
						if ok {
							return obj.CustomerId, nil
						}
						inter, ok := p.Source.(UserGetter)
						if ok {
							face := inter.GetUser()
							if face == nil {
								return nil, nil
							}
							return face.CustomerId, nil
						}
						return nil, fmt.Errorf("field customer_id not resolved")
					},
				},
				"email": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*User)
						if ok {
							return obj.Email, nil
						}
						inter, ok := p.Source.(UserGetter)
						if ok {
							face := inter.GetUser()
							if face == nil {
								return nil, nil
							}
							return face.Email, nil
						}
						return nil, fmt.Errorf("field email not resolved")
					},
				},
				"name": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*User)
						if ok {
							return obj.Name, nil
						}
						inter, ok := p.Source.(UserGetter)
						if ok {
							face := inter.GetUser()
							if face == nil {
								return nil, nil
							}
							return face.Name, nil
						}
						return nil, fmt.Errorf("field name not resolved")
					},
				},
				"verified": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Boolean,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*User)
						if ok {
							return obj.Verified, nil
						}
						inter, ok := p.Source.(UserGetter)
						if ok {
							face := inter.GetUser()
							if face == nil {
								return nil, nil
							}
							return face.Verified, nil
						}
						return nil, fmt.Errorf("field verified not resolved")
					},
				},
				"admin": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Boolean,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*User)
						if ok {
							return obj.Admin, nil
						}
						inter, ok := p.Source.(UserGetter)
						if ok {
							face := inter.GetUser()
							if face == nil {
								return nil, nil
							}
							return face.Admin, nil
						}
						return nil, fmt.Errorf("field admin not resolved")
					},
				},
				"active": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Boolean,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*User)
						if ok {
							return obj.Active, nil
						}
						inter, ok := p.Source.(UserGetter)
						if ok {
							face := inter.GetUser()
							if face == nil {
								return nil, nil
							}
							return face.Active, nil
						}
						return nil, fmt.Errorf("field active not resolved")
					},
				},
			}
		}),
	})
}
func NewPopulatedUser(r randyUser, easy bool) *User {
	this := &User{}
	this.Id = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Id *= -1
	}
	this.CustomerId = randStringUser(r)
	this.Email = randStringUser(r)
	this.Name = randStringUser(r)
	this.Verified = bool(bool(r.Intn(2) == 0))
	this.Admin = bool(bool(r.Intn(2) == 0))
	this.Active = bool(bool(r.Intn(2) == 0))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyUser interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneUser(r randyUser) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringUser(r randyUser) string {
	v1 := r.Intn(100)
	tmps := make([]rune, v1)
	for i := 0; i < v1; i++ {
		tmps[i] = randUTF8RuneUser(r)
	}
	return string(tmps)
}
func randUnrecognizedUser(r randyUser, maxFieldNumber int) (data []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		data = randFieldUser(data, r, fieldNumber, wire)
	}
	return data
}
func randFieldUser(data []byte, r randyUser, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		data = encodeVarintPopulateUser(data, uint64(key))
		v2 := r.Int63()
		if r.Intn(2) == 0 {
			v2 *= -1
		}
		data = encodeVarintPopulateUser(data, uint64(v2))
	case 1:
		data = encodeVarintPopulateUser(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		data = encodeVarintPopulateUser(data, uint64(key))
		ll := r.Intn(100)
		data = encodeVarintPopulateUser(data, uint64(ll))
		for j := 0; j < ll; j++ {
			data = append(data, byte(r.Intn(256)))
		}
	default:
		data = encodeVarintPopulateUser(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return data
}
func encodeVarintPopulateUser(data []byte, v uint64) []byte {
	for v >= 1<<7 {
		data = append(data, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	data = append(data, uint8(v))
	return data
}
