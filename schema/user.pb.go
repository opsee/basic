// Code generated by protoc-gen-gogo.
// source: user.proto
// DO NOT EDIT!

package schema

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/opsee/protobuf/opseeproto"
import opsee_types "github.com/opsee/protobuf/opseeproto/types"

import github_com_graphql_go_graphql "github.com/graphql-go/graphql"
import github_com_opsee_protobuf_plugin_graphql_scalars "github.com/opsee/protobuf/plugin/graphql/scalars"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type User struct {
	Id           int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" token:"id"`
	CustomerId   string                 `protobuf:"bytes,2,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty" token:"customer_id" db:"customer_id"`
	Email        string                 `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty" token:"email"`
	Name         string                 `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty" token:"name"`
	Verified     bool                   `protobuf:"varint,5,opt,name=verified,proto3" json:"verified,omitempty" token:"verified"`
	Admin        bool                   `protobuf:"varint,6,opt,name=admin,proto3" json:"admin,omitempty" token:"admin"`
	Active       bool                   `protobuf:"varint,7,opt,name=active,proto3" json:"active,omitempty" token:"active"`
	AdminId      int32                  `protobuf:"varint,8,opt,name=admin_id,json=adminId,proto3" json:"admin_id,omitempty" token:"admin_id"`
	PasswordHash string                 `protobuf:"bytes,9,opt,name=password_hash,json=passwordHash,proto3" json:"-" db:"password_hash"`
	CreatedAt    *opsee_types.Timestamp `protobuf:"bytes,10,opt,name=created_at,json=createdAt" json:"created_at,omitempty" db:"created_at"`
	UpdatedAt    *opsee_types.Timestamp `protobuf:"bytes,11,opt,name=updated_at,json=updatedAt" json:"updated_at,omitempty" db:"updated_at"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptorUser, []int{0} }

func (m *User) GetCreatedAt() *opsee_types.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *User) GetUpdatedAt() *opsee_types.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

type Customer struct {
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	CreatedAt     *opsee_types.Timestamp `protobuf:"bytes,3,opt,name=created_at,json=createdAt" json:"created_at,omitempty" db:"created_at"`
	UpdatedAt     *opsee_types.Timestamp `protobuf:"bytes,4,opt,name=updated_at,json=updatedAt" json:"updated_at,omitempty" db:"updated_at"`
	Users         []*User                `protobuf:"bytes,5,rep,name=users" json:"users,omitempty"`
	BastionStates []*BastionState        `protobuf:"bytes,6,rep,name=bastion_states,json=bastionStates" json:"bastion_states,omitempty"`
}

func (m *Customer) Reset()                    { *m = Customer{} }
func (m *Customer) String() string            { return proto.CompactTextString(m) }
func (*Customer) ProtoMessage()               {}
func (*Customer) Descriptor() ([]byte, []int) { return fileDescriptorUser, []int{1} }

func (m *Customer) GetCreatedAt() *opsee_types.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Customer) GetUpdatedAt() *opsee_types.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *Customer) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *Customer) GetBastionStates() []*BastionState {
	if m != nil {
		return m.BastionStates
	}
	return nil
}

type Org struct {
	Id             string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name           string          `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Subscription   string          `protobuf:"bytes,3,opt,name=subscription,proto3" json:"subscription,omitempty"`
	CreditCardInfo *CreditCardInfo `protobuf:"bytes,4,opt,name=creditCardInfo" json:"creditCardInfo,omitempty"`
	Users          []*User         `protobuf:"bytes,5,rep,name=users" json:"users,omitempty"`
}

func (m *Org) Reset()                    { *m = Org{} }
func (m *Org) String() string            { return proto.CompactTextString(m) }
func (*Org) ProtoMessage()               {}
func (*Org) Descriptor() ([]byte, []int) { return fileDescriptorUser, []int{2} }

func (m *Org) GetCreditCardInfo() *CreditCardInfo {
	if m != nil {
		return m.CreditCardInfo
	}
	return nil
}

func (m *Org) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

type CreditCardInfo struct {
	Name     string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Last4    string `protobuf:"bytes,2,opt,name=last4,proto3" json:"last4,omitempty"`
	ExpMonth int32  `protobuf:"varint,3,opt,name=exp_month,json=expMonth,proto3" json:"exp_month,omitempty"`
	ExpYear  int32  `protobuf:"varint,4,opt,name=exp_year,json=expYear,proto3" json:"exp_year,omitempty"`
	Brand    string `protobuf:"bytes,5,opt,name=brand,proto3" json:"brand,omitempty"`
}

func (m *CreditCardInfo) Reset()                    { *m = CreditCardInfo{} }
func (m *CreditCardInfo) String() string            { return proto.CompactTextString(m) }
func (*CreditCardInfo) ProtoMessage()               {}
func (*CreditCardInfo) Descriptor() ([]byte, []int) { return fileDescriptorUser, []int{3} }

func init() {
	proto.RegisterType((*User)(nil), "opsee.User")
	proto.RegisterType((*Customer)(nil), "opsee.Customer")
	proto.RegisterType((*Org)(nil), "opsee.Org")
	proto.RegisterType((*CreditCardInfo)(nil), "opsee.CreditCardInfo")
}
func (this *User) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*User)
	if !ok {
		that2, ok := that.(User)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.CustomerId != that1.CustomerId {
		return false
	}
	if this.Email != that1.Email {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Verified != that1.Verified {
		return false
	}
	if this.Admin != that1.Admin {
		return false
	}
	if this.Active != that1.Active {
		return false
	}
	if this.AdminId != that1.AdminId {
		return false
	}
	if this.PasswordHash != that1.PasswordHash {
		return false
	}
	if !this.CreatedAt.Equal(that1.CreatedAt) {
		return false
	}
	if !this.UpdatedAt.Equal(that1.UpdatedAt) {
		return false
	}
	return true
}
func (this *Customer) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Customer)
	if !ok {
		that2, ok := that.(Customer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if !this.CreatedAt.Equal(that1.CreatedAt) {
		return false
	}
	if !this.UpdatedAt.Equal(that1.UpdatedAt) {
		return false
	}
	if len(this.Users) != len(that1.Users) {
		return false
	}
	for i := range this.Users {
		if !this.Users[i].Equal(that1.Users[i]) {
			return false
		}
	}
	if len(this.BastionStates) != len(that1.BastionStates) {
		return false
	}
	for i := range this.BastionStates {
		if !this.BastionStates[i].Equal(that1.BastionStates[i]) {
			return false
		}
	}
	return true
}
func (this *Org) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Org)
	if !ok {
		that2, ok := that.(Org)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Subscription != that1.Subscription {
		return false
	}
	if !this.CreditCardInfo.Equal(that1.CreditCardInfo) {
		return false
	}
	if len(this.Users) != len(that1.Users) {
		return false
	}
	for i := range this.Users {
		if !this.Users[i].Equal(that1.Users[i]) {
			return false
		}
	}
	return true
}
func (this *CreditCardInfo) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CreditCardInfo)
	if !ok {
		that2, ok := that.(CreditCardInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Last4 != that1.Last4 {
		return false
	}
	if this.ExpMonth != that1.ExpMonth {
		return false
	}
	if this.ExpYear != that1.ExpYear {
		return false
	}
	if this.Brand != that1.Brand {
		return false
	}
	return true
}

type UserGetter interface {
	GetUser() *User
}

var GraphQLUserType *github_com_graphql_go_graphql.Object

type CustomerGetter interface {
	GetCustomer() *Customer
}

var GraphQLCustomerType *github_com_graphql_go_graphql.Object

type OrgGetter interface {
	GetOrg() *Org
}

var GraphQLOrgType *github_com_graphql_go_graphql.Object

type CreditCardInfoGetter interface {
	GetCreditCardInfo() *CreditCardInfo
}

var GraphQLCreditCardInfoType *github_com_graphql_go_graphql.Object

func init() {
	GraphQLUserType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "schemaUser",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"id": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*User)
						if ok {
							return obj.Id, nil
						}
						inter, ok := p.Source.(UserGetter)
						if ok {
							face := inter.GetUser()
							if face == nil {
								return nil, nil
							}
							return face.Id, nil
						}
						return nil, fmt.Errorf("field id not resolved")
					},
				},
				"customer_id": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*User)
						if ok {
							return obj.CustomerId, nil
						}
						inter, ok := p.Source.(UserGetter)
						if ok {
							face := inter.GetUser()
							if face == nil {
								return nil, nil
							}
							return face.CustomerId, nil
						}
						return nil, fmt.Errorf("field customer_id not resolved")
					},
				},
				"email": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*User)
						if ok {
							return obj.Email, nil
						}
						inter, ok := p.Source.(UserGetter)
						if ok {
							face := inter.GetUser()
							if face == nil {
								return nil, nil
							}
							return face.Email, nil
						}
						return nil, fmt.Errorf("field email not resolved")
					},
				},
				"name": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*User)
						if ok {
							return obj.Name, nil
						}
						inter, ok := p.Source.(UserGetter)
						if ok {
							face := inter.GetUser()
							if face == nil {
								return nil, nil
							}
							return face.Name, nil
						}
						return nil, fmt.Errorf("field name not resolved")
					},
				},
				"verified": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Boolean,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*User)
						if ok {
							return obj.Verified, nil
						}
						inter, ok := p.Source.(UserGetter)
						if ok {
							face := inter.GetUser()
							if face == nil {
								return nil, nil
							}
							return face.Verified, nil
						}
						return nil, fmt.Errorf("field verified not resolved")
					},
				},
				"admin": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Boolean,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*User)
						if ok {
							return obj.Admin, nil
						}
						inter, ok := p.Source.(UserGetter)
						if ok {
							face := inter.GetUser()
							if face == nil {
								return nil, nil
							}
							return face.Admin, nil
						}
						return nil, fmt.Errorf("field admin not resolved")
					},
				},
				"active": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Boolean,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*User)
						if ok {
							return obj.Active, nil
						}
						inter, ok := p.Source.(UserGetter)
						if ok {
							face := inter.GetUser()
							if face == nil {
								return nil, nil
							}
							return face.Active, nil
						}
						return nil, fmt.Errorf("field active not resolved")
					},
				},
				"admin_id": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*User)
						if ok {
							return obj.AdminId, nil
						}
						inter, ok := p.Source.(UserGetter)
						if ok {
							face := inter.GetUser()
							if face == nil {
								return nil, nil
							}
							return face.AdminId, nil
						}
						return nil, fmt.Errorf("field admin_id not resolved")
					},
				},
				"password_hash": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*User)
						if ok {
							return obj.PasswordHash, nil
						}
						inter, ok := p.Source.(UserGetter)
						if ok {
							face := inter.GetUser()
							if face == nil {
								return nil, nil
							}
							return face.PasswordHash, nil
						}
						return nil, fmt.Errorf("field password_hash not resolved")
					},
				},
				"created_at": &github_com_graphql_go_graphql.Field{
					Type:        github_com_opsee_protobuf_plugin_graphql_scalars.Timestamp,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*User)
						if ok {
							if obj.CreatedAt == nil {
								return nil, nil
							}
							return obj.GetCreatedAt(), nil
						}
						inter, ok := p.Source.(UserGetter)
						if ok {
							face := inter.GetUser()
							if face == nil {
								return nil, nil
							}
							if face.CreatedAt == nil {
								return nil, nil
							}
							return face.GetCreatedAt(), nil
						}
						return nil, fmt.Errorf("field created_at not resolved")
					},
				},
				"updated_at": &github_com_graphql_go_graphql.Field{
					Type:        github_com_opsee_protobuf_plugin_graphql_scalars.Timestamp,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*User)
						if ok {
							if obj.UpdatedAt == nil {
								return nil, nil
							}
							return obj.GetUpdatedAt(), nil
						}
						inter, ok := p.Source.(UserGetter)
						if ok {
							face := inter.GetUser()
							if face == nil {
								return nil, nil
							}
							if face.UpdatedAt == nil {
								return nil, nil
							}
							return face.GetUpdatedAt(), nil
						}
						return nil, fmt.Errorf("field updated_at not resolved")
					},
				},
			}
		}),
	})
	GraphQLCustomerType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "schemaCustomer",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"id": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Customer)
						if ok {
							return obj.Id, nil
						}
						inter, ok := p.Source.(CustomerGetter)
						if ok {
							face := inter.GetCustomer()
							if face == nil {
								return nil, nil
							}
							return face.Id, nil
						}
						return nil, fmt.Errorf("field id not resolved")
					},
				},
				"name": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Customer)
						if ok {
							return obj.Name, nil
						}
						inter, ok := p.Source.(CustomerGetter)
						if ok {
							face := inter.GetCustomer()
							if face == nil {
								return nil, nil
							}
							return face.Name, nil
						}
						return nil, fmt.Errorf("field name not resolved")
					},
				},
				"created_at": &github_com_graphql_go_graphql.Field{
					Type:        github_com_opsee_protobuf_plugin_graphql_scalars.Timestamp,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Customer)
						if ok {
							if obj.CreatedAt == nil {
								return nil, nil
							}
							return obj.GetCreatedAt(), nil
						}
						inter, ok := p.Source.(CustomerGetter)
						if ok {
							face := inter.GetCustomer()
							if face == nil {
								return nil, nil
							}
							if face.CreatedAt == nil {
								return nil, nil
							}
							return face.GetCreatedAt(), nil
						}
						return nil, fmt.Errorf("field created_at not resolved")
					},
				},
				"updated_at": &github_com_graphql_go_graphql.Field{
					Type:        github_com_opsee_protobuf_plugin_graphql_scalars.Timestamp,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Customer)
						if ok {
							if obj.UpdatedAt == nil {
								return nil, nil
							}
							return obj.GetUpdatedAt(), nil
						}
						inter, ok := p.Source.(CustomerGetter)
						if ok {
							face := inter.GetCustomer()
							if face == nil {
								return nil, nil
							}
							if face.UpdatedAt == nil {
								return nil, nil
							}
							return face.GetUpdatedAt(), nil
						}
						return nil, fmt.Errorf("field updated_at not resolved")
					},
				},
				"users": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(GraphQLUserType),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Customer)
						if ok {
							return obj.Users, nil
						}
						inter, ok := p.Source.(CustomerGetter)
						if ok {
							face := inter.GetCustomer()
							if face == nil {
								return nil, nil
							}
							return face.Users, nil
						}
						return nil, fmt.Errorf("field users not resolved")
					},
				},
				"bastion_states": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(GraphQLBastionStateType),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Customer)
						if ok {
							return obj.BastionStates, nil
						}
						inter, ok := p.Source.(CustomerGetter)
						if ok {
							face := inter.GetCustomer()
							if face == nil {
								return nil, nil
							}
							return face.BastionStates, nil
						}
						return nil, fmt.Errorf("field bastion_states not resolved")
					},
				},
			}
		}),
	})
	GraphQLOrgType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "schemaOrg",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"id": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Org)
						if ok {
							return obj.Id, nil
						}
						inter, ok := p.Source.(OrgGetter)
						if ok {
							face := inter.GetOrg()
							if face == nil {
								return nil, nil
							}
							return face.Id, nil
						}
						return nil, fmt.Errorf("field id not resolved")
					},
				},
				"name": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Org)
						if ok {
							return obj.Name, nil
						}
						inter, ok := p.Source.(OrgGetter)
						if ok {
							face := inter.GetOrg()
							if face == nil {
								return nil, nil
							}
							return face.Name, nil
						}
						return nil, fmt.Errorf("field name not resolved")
					},
				},
				"subscription": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Org)
						if ok {
							return obj.Subscription, nil
						}
						inter, ok := p.Source.(OrgGetter)
						if ok {
							face := inter.GetOrg()
							if face == nil {
								return nil, nil
							}
							return face.Subscription, nil
						}
						return nil, fmt.Errorf("field subscription not resolved")
					},
				},
				"creditCardInfo": &github_com_graphql_go_graphql.Field{
					Type:        GraphQLCreditCardInfoType,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Org)
						if ok {
							if obj.CreditCardInfo == nil {
								return nil, nil
							}
							return obj.GetCreditCardInfo(), nil
						}
						inter, ok := p.Source.(OrgGetter)
						if ok {
							face := inter.GetOrg()
							if face == nil {
								return nil, nil
							}
							if face.CreditCardInfo == nil {
								return nil, nil
							}
							return face.GetCreditCardInfo(), nil
						}
						return nil, fmt.Errorf("field creditCardInfo not resolved")
					},
				},
				"users": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(GraphQLUserType),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Org)
						if ok {
							return obj.Users, nil
						}
						inter, ok := p.Source.(OrgGetter)
						if ok {
							face := inter.GetOrg()
							if face == nil {
								return nil, nil
							}
							return face.Users, nil
						}
						return nil, fmt.Errorf("field users not resolved")
					},
				},
			}
		}),
	})
	GraphQLCreditCardInfoType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "schemaCreditCardInfo",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"name": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*CreditCardInfo)
						if ok {
							return obj.Name, nil
						}
						inter, ok := p.Source.(CreditCardInfoGetter)
						if ok {
							face := inter.GetCreditCardInfo()
							if face == nil {
								return nil, nil
							}
							return face.Name, nil
						}
						return nil, fmt.Errorf("field name not resolved")
					},
				},
				"last4": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*CreditCardInfo)
						if ok {
							return obj.Last4, nil
						}
						inter, ok := p.Source.(CreditCardInfoGetter)
						if ok {
							face := inter.GetCreditCardInfo()
							if face == nil {
								return nil, nil
							}
							return face.Last4, nil
						}
						return nil, fmt.Errorf("field last4 not resolved")
					},
				},
				"exp_month": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*CreditCardInfo)
						if ok {
							return obj.ExpMonth, nil
						}
						inter, ok := p.Source.(CreditCardInfoGetter)
						if ok {
							face := inter.GetCreditCardInfo()
							if face == nil {
								return nil, nil
							}
							return face.ExpMonth, nil
						}
						return nil, fmt.Errorf("field exp_month not resolved")
					},
				},
				"exp_year": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*CreditCardInfo)
						if ok {
							return obj.ExpYear, nil
						}
						inter, ok := p.Source.(CreditCardInfoGetter)
						if ok {
							face := inter.GetCreditCardInfo()
							if face == nil {
								return nil, nil
							}
							return face.ExpYear, nil
						}
						return nil, fmt.Errorf("field exp_year not resolved")
					},
				},
				"brand": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*CreditCardInfo)
						if ok {
							return obj.Brand, nil
						}
						inter, ok := p.Source.(CreditCardInfoGetter)
						if ok {
							face := inter.GetCreditCardInfo()
							if face == nil {
								return nil, nil
							}
							return face.Brand, nil
						}
						return nil, fmt.Errorf("field brand not resolved")
					},
				},
			}
		}),
	})
}
func (m *User) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *User) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintUser(data, i, uint64(m.Id))
	}
	if len(m.CustomerId) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintUser(data, i, uint64(len(m.CustomerId)))
		i += copy(data[i:], m.CustomerId)
	}
	if len(m.Email) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintUser(data, i, uint64(len(m.Email)))
		i += copy(data[i:], m.Email)
	}
	if len(m.Name) > 0 {
		data[i] = 0x22
		i++
		i = encodeVarintUser(data, i, uint64(len(m.Name)))
		i += copy(data[i:], m.Name)
	}
	if m.Verified {
		data[i] = 0x28
		i++
		if m.Verified {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if m.Admin {
		data[i] = 0x30
		i++
		if m.Admin {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if m.Active {
		data[i] = 0x38
		i++
		if m.Active {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if m.AdminId != 0 {
		data[i] = 0x40
		i++
		i = encodeVarintUser(data, i, uint64(m.AdminId))
	}
	if len(m.PasswordHash) > 0 {
		data[i] = 0x4a
		i++
		i = encodeVarintUser(data, i, uint64(len(m.PasswordHash)))
		i += copy(data[i:], m.PasswordHash)
	}
	if m.CreatedAt != nil {
		data[i] = 0x52
		i++
		i = encodeVarintUser(data, i, uint64(m.CreatedAt.Size()))
		n1, err := m.CreatedAt.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.UpdatedAt != nil {
		data[i] = 0x5a
		i++
		i = encodeVarintUser(data, i, uint64(m.UpdatedAt.Size()))
		n2, err := m.UpdatedAt.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *Customer) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Customer) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintUser(data, i, uint64(len(m.Id)))
		i += copy(data[i:], m.Id)
	}
	if len(m.Name) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintUser(data, i, uint64(len(m.Name)))
		i += copy(data[i:], m.Name)
	}
	if m.CreatedAt != nil {
		data[i] = 0x1a
		i++
		i = encodeVarintUser(data, i, uint64(m.CreatedAt.Size()))
		n3, err := m.CreatedAt.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.UpdatedAt != nil {
		data[i] = 0x22
		i++
		i = encodeVarintUser(data, i, uint64(m.UpdatedAt.Size()))
		n4, err := m.UpdatedAt.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if len(m.Users) > 0 {
		for _, msg := range m.Users {
			data[i] = 0x2a
			i++
			i = encodeVarintUser(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.BastionStates) > 0 {
		for _, msg := range m.BastionStates {
			data[i] = 0x32
			i++
			i = encodeVarintUser(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Org) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Org) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintUser(data, i, uint64(len(m.Id)))
		i += copy(data[i:], m.Id)
	}
	if len(m.Name) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintUser(data, i, uint64(len(m.Name)))
		i += copy(data[i:], m.Name)
	}
	if len(m.Subscription) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintUser(data, i, uint64(len(m.Subscription)))
		i += copy(data[i:], m.Subscription)
	}
	if m.CreditCardInfo != nil {
		data[i] = 0x22
		i++
		i = encodeVarintUser(data, i, uint64(m.CreditCardInfo.Size()))
		n5, err := m.CreditCardInfo.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if len(m.Users) > 0 {
		for _, msg := range m.Users {
			data[i] = 0x2a
			i++
			i = encodeVarintUser(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CreditCardInfo) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CreditCardInfo) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintUser(data, i, uint64(len(m.Name)))
		i += copy(data[i:], m.Name)
	}
	if len(m.Last4) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintUser(data, i, uint64(len(m.Last4)))
		i += copy(data[i:], m.Last4)
	}
	if m.ExpMonth != 0 {
		data[i] = 0x18
		i++
		i = encodeVarintUser(data, i, uint64(m.ExpMonth))
	}
	if m.ExpYear != 0 {
		data[i] = 0x20
		i++
		i = encodeVarintUser(data, i, uint64(m.ExpYear))
	}
	if len(m.Brand) > 0 {
		data[i] = 0x2a
		i++
		i = encodeVarintUser(data, i, uint64(len(m.Brand)))
		i += copy(data[i:], m.Brand)
	}
	return i, nil
}

func encodeFixed64User(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32User(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintUser(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedUser(r randyUser, easy bool) *User {
	this := &User{}
	this.Id = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Id *= -1
	}
	this.CustomerId = randStringUser(r)
	this.Email = randStringUser(r)
	this.Name = randStringUser(r)
	this.Verified = bool(bool(r.Intn(2) == 0))
	this.Admin = bool(bool(r.Intn(2) == 0))
	this.Active = bool(bool(r.Intn(2) == 0))
	this.AdminId = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.AdminId *= -1
	}
	this.PasswordHash = randStringUser(r)
	if r.Intn(10) != 0 {
		this.CreatedAt = opsee_types.NewPopulatedTimestamp(r, easy)
	}
	if r.Intn(10) != 0 {
		this.UpdatedAt = opsee_types.NewPopulatedTimestamp(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedCustomer(r randyUser, easy bool) *Customer {
	this := &Customer{}
	this.Id = randStringUser(r)
	this.Name = randStringUser(r)
	if r.Intn(10) != 0 {
		this.CreatedAt = opsee_types.NewPopulatedTimestamp(r, easy)
	}
	if r.Intn(10) != 0 {
		this.UpdatedAt = opsee_types.NewPopulatedTimestamp(r, easy)
	}
	if r.Intn(10) != 0 {
		v1 := r.Intn(5)
		this.Users = make([]*User, v1)
		for i := 0; i < v1; i++ {
			this.Users[i] = NewPopulatedUser(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v2 := r.Intn(5)
		this.BastionStates = make([]*BastionState, v2)
		for i := 0; i < v2; i++ {
			this.BastionStates[i] = NewPopulatedBastionState(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedOrg(r randyUser, easy bool) *Org {
	this := &Org{}
	this.Id = randStringUser(r)
	this.Name = randStringUser(r)
	this.Subscription = randStringUser(r)
	if r.Intn(10) != 0 {
		this.CreditCardInfo = NewPopulatedCreditCardInfo(r, easy)
	}
	if r.Intn(10) != 0 {
		v3 := r.Intn(5)
		this.Users = make([]*User, v3)
		for i := 0; i < v3; i++ {
			this.Users[i] = NewPopulatedUser(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedCreditCardInfo(r randyUser, easy bool) *CreditCardInfo {
	this := &CreditCardInfo{}
	this.Name = randStringUser(r)
	this.Last4 = randStringUser(r)
	this.ExpMonth = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.ExpMonth *= -1
	}
	this.ExpYear = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.ExpYear *= -1
	}
	this.Brand = randStringUser(r)
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyUser interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneUser(r randyUser) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringUser(r randyUser) string {
	v4 := r.Intn(100)
	tmps := make([]rune, v4)
	for i := 0; i < v4; i++ {
		tmps[i] = randUTF8RuneUser(r)
	}
	return string(tmps)
}
func randUnrecognizedUser(r randyUser, maxFieldNumber int) (data []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		data = randFieldUser(data, r, fieldNumber, wire)
	}
	return data
}
func randFieldUser(data []byte, r randyUser, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		data = encodeVarintPopulateUser(data, uint64(key))
		v5 := r.Int63()
		if r.Intn(2) == 0 {
			v5 *= -1
		}
		data = encodeVarintPopulateUser(data, uint64(v5))
	case 1:
		data = encodeVarintPopulateUser(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		data = encodeVarintPopulateUser(data, uint64(key))
		ll := r.Intn(100)
		data = encodeVarintPopulateUser(data, uint64(ll))
		for j := 0; j < ll; j++ {
			data = append(data, byte(r.Intn(256)))
		}
	default:
		data = encodeVarintPopulateUser(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return data
}
func encodeVarintPopulateUser(data []byte, v uint64) []byte {
	for v >= 1<<7 {
		data = append(data, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	data = append(data, uint8(v))
	return data
}
func (m *User) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovUser(uint64(m.Id))
	}
	l = len(m.CustomerId)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	if m.Verified {
		n += 2
	}
	if m.Admin {
		n += 2
	}
	if m.Active {
		n += 2
	}
	if m.AdminId != 0 {
		n += 1 + sovUser(uint64(m.AdminId))
	}
	l = len(m.PasswordHash)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	if m.CreatedAt != nil {
		l = m.CreatedAt.Size()
		n += 1 + l + sovUser(uint64(l))
	}
	if m.UpdatedAt != nil {
		l = m.UpdatedAt.Size()
		n += 1 + l + sovUser(uint64(l))
	}
	return n
}

func (m *Customer) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	if m.CreatedAt != nil {
		l = m.CreatedAt.Size()
		n += 1 + l + sovUser(uint64(l))
	}
	if m.UpdatedAt != nil {
		l = m.UpdatedAt.Size()
		n += 1 + l + sovUser(uint64(l))
	}
	if len(m.Users) > 0 {
		for _, e := range m.Users {
			l = e.Size()
			n += 1 + l + sovUser(uint64(l))
		}
	}
	if len(m.BastionStates) > 0 {
		for _, e := range m.BastionStates {
			l = e.Size()
			n += 1 + l + sovUser(uint64(l))
		}
	}
	return n
}

func (m *Org) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	l = len(m.Subscription)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	if m.CreditCardInfo != nil {
		l = m.CreditCardInfo.Size()
		n += 1 + l + sovUser(uint64(l))
	}
	if len(m.Users) > 0 {
		for _, e := range m.Users {
			l = e.Size()
			n += 1 + l + sovUser(uint64(l))
		}
	}
	return n
}

func (m *CreditCardInfo) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	l = len(m.Last4)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	if m.ExpMonth != 0 {
		n += 1 + sovUser(uint64(m.ExpMonth))
	}
	if m.ExpYear != 0 {
		n += 1 + sovUser(uint64(m.ExpYear))
	}
	l = len(m.Brand)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	return n
}

func sovUser(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozUser(x uint64) (n int) {
	return sovUser(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *User) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: User: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: User: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CustomerId = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Verified", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Verified = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admin", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Admin = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Active", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Active = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminId", wireType)
			}
			m.AdminId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.AdminId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PasswordHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PasswordHash = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = &opsee_types.Timestamp{}
			}
			if err := m.CreatedAt.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = &opsee_types.Timestamp{}
			}
			if err := m.UpdatedAt.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Customer) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Customer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Customer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = &opsee_types.Timestamp{}
			}
			if err := m.CreatedAt.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = &opsee_types.Timestamp{}
			}
			if err := m.UpdatedAt.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Users = append(m.Users, &User{})
			if err := m.Users[len(m.Users)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BastionStates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BastionStates = append(m.BastionStates, &BastionState{})
			if err := m.BastionStates[len(m.BastionStates)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Org) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Org: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Org: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subscription", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subscription = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreditCardInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreditCardInfo == nil {
				m.CreditCardInfo = &CreditCardInfo{}
			}
			if err := m.CreditCardInfo.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Users = append(m.Users, &User{})
			if err := m.Users[len(m.Users)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreditCardInfo) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreditCardInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreditCardInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Last4", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Last4 = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpMonth", wireType)
			}
			m.ExpMonth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.ExpMonth |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpYear", wireType)
			}
			m.ExpYear = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.ExpYear |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Brand", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Brand = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipUser(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowUser
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUser
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUser
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthUser
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowUser
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipUser(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthUser = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowUser   = fmt.Errorf("proto: integer overflow")
)

var fileDescriptorUser = []byte{
	// 675 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x94, 0x3d, 0x6f, 0x13, 0x4d,
	0x10, 0xc7, 0x75, 0xb1, 0xcf, 0xb1, 0xc7, 0x89, 0x9f, 0x47, 0x9b, 0x17, 0x1d, 0x89, 0x48, 0xc2,
	0x2a, 0x45, 0x24, 0x88, 0x8d, 0x20, 0x55, 0x24, 0x24, 0xe2, 0x34, 0x04, 0x29, 0x42, 0x5a, 0xa0,
	0x80, 0xc6, 0xba, 0x97, 0xb5, 0x7d, 0x4a, 0xee, 0x45, 0xb7, 0xeb, 0x40, 0x3a, 0x4a, 0x3e, 0x07,
	0x12, 0x88, 0x8e, 0x96, 0x92, 0x92, 0x92, 0x4f, 0x10, 0x01, 0x25, 0x05, 0x05, 0x15, 0x25, 0x73,
	0x73, 0x7b, 0x8e, 0x9d, 0xca, 0x12, 0x14, 0x2b, 0xef, 0xff, 0xe6, 0x37, 0x7f, 0xcd, 0xec, 0xce,
	0x1a, 0x60, 0xa4, 0x64, 0xd6, 0x4e, 0xb3, 0x44, 0x27, 0xcc, 0x4e, 0x52, 0x25, 0xe5, 0xda, 0xee,
	0x20, 0xd4, 0xc3, 0x91, 0xd7, 0xf6, 0x93, 0xa8, 0x33, 0x48, 0x06, 0x49, 0x87, 0xa2, 0xde, 0xa8,
	0x4f, 0x8a, 0x04, 0xed, 0x8a, 0xac, 0xb5, 0xdb, 0x13, 0x38, 0x19, 0x5c, 0xf2, 0x24, 0x8b, 0x04,
	0xda, 0x9a, 0x8c, 0xfd, 0x99, 0x32, 0xf4, 0x79, 0x2a, 0x55, 0x47, 0x87, 0x91, 0x54, 0xda, 0x8d,
	0x52, 0x93, 0xdb, 0x44, 0xe1, 0x9f, 0x14, 0x82, 0xff, 0xac, 0x42, 0xf5, 0x29, 0xd6, 0xcf, 0x38,
	0xcc, 0x85, 0x81, 0x63, 0x6d, 0x59, 0x3b, 0x76, 0x97, 0xbd, 0x7a, 0x77, 0xdd, 0xfa, 0x75, 0xb1,
	0x09, 0x3a, 0x39, 0x91, 0xf1, 0x3e, 0x0f, 0x03, 0x2e, 0x30, 0xca, 0x8e, 0xa1, 0xe9, 0x8f, 0x94,
	0x4e, 0x22, 0x99, 0xf5, 0x10, 0x9e, 0x43, 0xb8, 0xd1, 0xbd, 0x65, 0xe0, 0x6d, 0x03, 0x4f, 0x10,
	0x7c, 0x2b, 0xf0, 0xa6, 0x3f, 0x08, 0x28, 0xd5, 0x51, 0xc0, 0x6e, 0x82, 0x2d, 0x23, 0x37, 0x3c,
	0x75, 0x2a, 0x64, 0xb4, 0x62, 0x8c, 0x16, 0x8d, 0x11, 0xc5, 0xb8, 0x28, 0x18, 0xb6, 0x03, 0xd5,
	0xd8, 0x8d, 0xa4, 0x53, 0x25, 0x76, 0xd9, 0xb0, 0x0b, 0x86, 0xcd, 0x43, 0x5c, 0x10, 0xc1, 0xf6,
	0xa0, 0x7e, 0x26, 0xb3, 0xb0, 0x1f, 0xca, 0xc0, 0xb1, 0x91, 0xae, 0x77, 0x1d, 0x43, 0xff, 0x6f,
	0xe8, 0x32, 0xcc, 0xc5, 0x98, 0xcc, 0x8b, 0x71, 0x83, 0x28, 0x8c, 0x9d, 0x1a, 0xa5, 0x5c, 0x2d,
	0x86, 0x62, 0x58, 0x0c, 0xfd, 0xb2, 0x36, 0xd4, 0x5c, 0x5f, 0x87, 0x67, 0xd2, 0x99, 0x27, 0x7a,
	0xd5, 0xd0, 0xad, 0x92, 0xa6, 0x20, 0x17, 0x86, 0x62, 0x1d, 0xa8, 0x53, 0x62, 0x7e, 0x6a, 0x75,
	0x3a, 0xe2, 0xe5, 0x89, 0x72, 0xca, 0x10, 0x17, 0xf3, 0xb4, 0xc5, 0xa3, 0xb9, 0x0f, 0x8b, 0xa9,
	0xab, 0xd4, 0x8b, 0x24, 0x0b, 0x7a, 0x43, 0x57, 0x0d, 0x9d, 0x06, 0xb5, 0xbd, 0xfe, 0xe3, 0x62,
	0xd3, 0xda, 0xc5, 0x54, 0x96, 0x1f, 0xec, 0x14, 0xc1, 0xc5, 0x42, 0xa9, 0x1f, 0xa0, 0x64, 0x0f,
	0x01, 0xfc, 0x4c, 0xba, 0x5a, 0x06, 0x3d, 0x57, 0x3b, 0x80, 0xe9, 0xcd, 0x3b, 0xab, 0xed, 0x62,
	0x86, 0x68, 0x2e, 0xda, 0x4f, 0xca, 0xb9, 0xe8, 0x2e, 0xa1, 0xe3, 0x7f, 0x74, 0x55, 0xe3, 0x0c,
	0x2e, 0x1a, 0x46, 0x1c, 0xe8, 0xdc, 0x6b, 0x94, 0x06, 0xa5, 0x57, 0x73, 0x36, 0xaf, 0xcb, 0x0c,
	0xf4, 0x32, 0xe2, 0x40, 0xf3, 0xb7, 0x73, 0x50, 0x3f, 0x34, 0x33, 0xc0, 0x5a, 0xe3, 0xa1, 0x6b,
	0xd0, 0x80, 0x31, 0x73, 0xc9, 0x34, 0x59, 0xe6, 0x3a, 0xa7, 0x1b, 0xa9, 0xfc, 0xc3, 0x46, 0xaa,
	0x7f, 0xd3, 0x08, 0xbb, 0x01, 0x76, 0xfe, 0xf0, 0x15, 0xce, 0x58, 0x05, 0x6d, 0x9a, 0xc6, 0x26,
	0x7f, 0x4c, 0xa2, 0x88, 0xb0, 0x7d, 0x68, 0x79, 0xae, 0xd2, 0x61, 0x12, 0xf7, 0xd0, 0x53, 0x4b,
	0x85, 0xc3, 0x95, 0xb3, 0x4b, 0x86, 0xed, 0x16, 0xc1, 0xc7, 0x79, 0x4c, 0x2c, 0x7a, 0x13, 0x4a,
	0xf1, 0x0f, 0x16, 0x54, 0x1e, 0x65, 0x83, 0x99, 0x8e, 0x88, 0xc3, 0x82, 0x1a, 0x79, 0xca, 0xcf,
	0xc2, 0x34, 0x77, 0x28, 0xde, 0x93, 0x98, 0xfa, 0xc6, 0xee, 0x41, 0x0b, 0xcf, 0x21, 0x08, 0xf5,
	0xa1, 0x9b, 0x05, 0x47, 0x71, 0x3f, 0x31, 0xed, 0xaf, 0x98, 0x5a, 0x0e, 0xa7, 0x82, 0xe2, 0x0a,
	0x3c, 0x43, 0xb7, 0xfc, 0xb5, 0x05, 0xad, 0x69, 0x97, 0x71, 0xb1, 0xd6, 0x44, 0xb1, 0xcb, 0x60,
	0x9f, 0x62, 0xa7, 0x7b, 0xa6, 0x83, 0x42, 0xb0, 0x75, 0x68, 0xc8, 0x97, 0x69, 0x2f, 0x4a, 0x62,
	0x3d, 0xa4, 0xfa, 0x6d, 0x51, 0xc7, 0x0f, 0xc7, 0xb9, 0x66, 0xd7, 0x20, 0xdf, 0xf7, 0xce, 0xa5,
	0x9b, 0x51, 0xd5, 0xb6, 0x98, 0x47, 0xfd, 0x0c, 0x65, 0xee, 0xe6, 0x65, 0x6e, 0x5c, 0xbc, 0x74,
	0x74, 0x23, 0xd1, 0xdd, 0xfe, 0xfd, 0x6d, 0xc3, 0x7a, 0xff, 0x7d, 0xc3, 0xfa, 0x88, 0xeb, 0x33,
	0xae, 0x2f, 0xb8, 0xbe, 0xe2, 0xfa, 0xf4, 0x66, 0xd3, 0x7a, 0x5e, 0x53, 0xfe, 0x10, 0xff, 0x54,
	0xbc, 0x1a, 0xfd, 0x05, 0xde, 0xfd, 0x13, 0x00, 0x00, 0xff, 0xff, 0xd3, 0x25, 0xed, 0xc8, 0xc1,
	0x05, 0x00, 0x00,
}
