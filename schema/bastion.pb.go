// Code generated by protoc-gen-gogo.
// source: bastion.proto
// DO NOT EDIT!

package schema

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/opsee/protobuf/opseeproto"
import opsee_types "github.com/opsee/protobuf/opseeproto/types"

import github_com_graphql_go_graphql "github.com/graphql-go/graphql"
import github_com_opsee_protobuf_plugin_graphql_scalars "github.com/opsee/protobuf/plugin/graphql/scalars"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Bastion struct {
	Id         string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CustomerId string                 `protobuf:"bytes,2,opt,name=customer_id,proto3" json:"customer_id,omitempty"`
	Status     string                 `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	LastSeen   *opsee_types.Timestamp `protobuf:"bytes,4,opt,name=last_seen" json:"last_seen,omitempty"`
}

func (m *Bastion) Reset()         { *m = Bastion{} }
func (m *Bastion) String() string { return proto.CompactTextString(m) }
func (*Bastion) ProtoMessage()    {}

func (m *Bastion) GetLastSeen() *opsee_types.Timestamp {
	if m != nil {
		return m.LastSeen
	}
	return nil
}

func init() {
	proto.RegisterType((*Bastion)(nil), "opsee.Bastion")
}
func (this *Bastion) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Bastion)
	if !ok {
		that2, ok := that.(Bastion)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.CustomerId != that1.CustomerId {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if !this.LastSeen.Equal(that1.LastSeen) {
		return false
	}
	return true
}

type BastionGetter interface {
	GetBastion() *Bastion
}

var GraphQLBastionType *github_com_graphql_go_graphql.Object

func init() {
	GraphQLBastionType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "schemaBastion",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"id": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Bastion)
						if ok {
							return obj.Id, nil
						}
						inter, ok := p.Source.(BastionGetter)
						if ok {
							face := inter.GetBastion()
							if face == nil {
								return nil, nil
							}
							return face.Id, nil
						}
						return nil, fmt.Errorf("field id not resolved")
					},
				},
				"customer_id": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Bastion)
						if ok {
							return obj.CustomerId, nil
						}
						inter, ok := p.Source.(BastionGetter)
						if ok {
							face := inter.GetBastion()
							if face == nil {
								return nil, nil
							}
							return face.CustomerId, nil
						}
						return nil, fmt.Errorf("field customer_id not resolved")
					},
				},
				"status": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Bastion)
						if ok {
							return obj.Status, nil
						}
						inter, ok := p.Source.(BastionGetter)
						if ok {
							face := inter.GetBastion()
							if face == nil {
								return nil, nil
							}
							return face.Status, nil
						}
						return nil, fmt.Errorf("field status not resolved")
					},
				},
				"last_seen": &github_com_graphql_go_graphql.Field{
					Type:        github_com_opsee_protobuf_plugin_graphql_scalars.Timestamp,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Bastion)
						if ok {
							if obj.LastSeen == nil {
								return nil, nil
							}
							return obj.GetLastSeen(), nil
						}
						inter, ok := p.Source.(BastionGetter)
						if ok {
							face := inter.GetBastion()
							if face == nil {
								return nil, nil
							}
							if face.LastSeen == nil {
								return nil, nil
							}
							return face.GetLastSeen(), nil
						}
						return nil, fmt.Errorf("field last_seen not resolved")
					},
				},
			}
		}),
	})
}
func NewPopulatedBastion(r randyBastion, easy bool) *Bastion {
	this := &Bastion{}
	this.Id = randStringBastion(r)
	this.CustomerId = randStringBastion(r)
	this.Status = randStringBastion(r)
	if r.Intn(10) != 0 {
		this.LastSeen = opsee_types.NewPopulatedTimestamp(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyBastion interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneBastion(r randyBastion) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringBastion(r randyBastion) string {
	v1 := r.Intn(100)
	tmps := make([]rune, v1)
	for i := 0; i < v1; i++ {
		tmps[i] = randUTF8RuneBastion(r)
	}
	return string(tmps)
}
func randUnrecognizedBastion(r randyBastion, maxFieldNumber int) (data []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		data = randFieldBastion(data, r, fieldNumber, wire)
	}
	return data
}
func randFieldBastion(data []byte, r randyBastion, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		data = encodeVarintPopulateBastion(data, uint64(key))
		v2 := r.Int63()
		if r.Intn(2) == 0 {
			v2 *= -1
		}
		data = encodeVarintPopulateBastion(data, uint64(v2))
	case 1:
		data = encodeVarintPopulateBastion(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		data = encodeVarintPopulateBastion(data, uint64(key))
		ll := r.Intn(100)
		data = encodeVarintPopulateBastion(data, uint64(ll))
		for j := 0; j < ll; j++ {
			data = append(data, byte(r.Intn(256)))
		}
	default:
		data = encodeVarintPopulateBastion(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return data
}
func encodeVarintPopulateBastion(data []byte, v uint64) []byte {
	for v >= 1<<7 {
		data = append(data, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	data = append(data, uint8(v))
	return data
}
