// Code generated by protoc-gen-gogo.
// source: checks.proto
// DO NOT EDIT!

package schema

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/opsee/protobuf/proto/google/protobuf"
import google_protobuf2 "github.com/opsee/protobuf/proto/google/protobuf"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/opsee/protobuf/opseeproto"

import github_com_graphql_go_graphql "github.com/graphql-go/graphql"
import github_com_opsee_protobuf_opseeproto "github.com/opsee/protobuf/opseeproto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Target struct {
	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type    string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Id      string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	Address string `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *Target) Reset()         { *m = Target{} }
func (m *Target) String() string { return proto.CompactTextString(m) }
func (*Target) ProtoMessage()    {}

type Check struct {
	Id         string                     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Interval   int32                      `protobuf:"varint,2,opt,name=interval,proto3" json:"interval,omitempty"`
	Target     *Target                    `protobuf:"bytes,3,opt,name=target" json:"target,omitempty"`
	LastRun    *google_protobuf.Timestamp `protobuf:"bytes,4,opt,name=last_run" json:"last_run,omitempty"`
	CheckSpec  *google_protobuf2.Any      `protobuf:"bytes,5,opt,name=check_spec" json:"check_spec,omitempty"`
	Name       string                     `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	Assertions []*Assertion               `protobuf:"bytes,7,rep,name=assertions" json:"assertions,omitempty"`
	Results    []*CheckResult             `protobuf:"bytes,8,rep,name=results" json:"results,omitempty"`
}

func (m *Check) Reset()         { *m = Check{} }
func (m *Check) String() string { return proto.CompactTextString(m) }
func (*Check) ProtoMessage()    {}

func (m *Check) GetTarget() *Target {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *Check) GetLastRun() *google_protobuf.Timestamp {
	if m != nil {
		return m.LastRun
	}
	return nil
}

func (m *Check) GetCheckSpec() *google_protobuf2.Any {
	if m != nil {
		return m.CheckSpec
	}
	return nil
}

func (m *Check) GetAssertions() []*Assertion {
	if m != nil {
		return m.Assertions
	}
	return nil
}

func (m *Check) GetResults() []*CheckResult {
	if m != nil {
		return m.Results
	}
	return nil
}

type Assertion struct {
	// key is one of "code", "header", "body".
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// In the case of key=header, value would be the header field.
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	// relationship is one of: "equal" "notEqual" "empty" "notEmpty" "contain" "notContain" "regExp"
	Relationship string `protobuf:"bytes,3,opt,name=relationship,proto3" json:"relationship,omitempty"`
	Operand      string `protobuf:"bytes,4,opt,name=operand,proto3" json:"operand,omitempty"`
}

func (m *Assertion) Reset()         { *m = Assertion{} }
func (m *Assertion) String() string { return proto.CompactTextString(m) }
func (*Assertion) ProtoMessage()    {}

type Header struct {
	Name   string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Values []string `protobuf:"bytes,2,rep,name=values" json:"values,omitempty"`
}

func (m *Header) Reset()         { *m = Header{} }
func (m *Header) String() string { return proto.CompactTextString(m) }
func (*Header) ProtoMessage()    {}

type HttpCheck struct {
	Name     string    `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Path     string    `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	Protocol string    `protobuf:"bytes,3,opt,name=protocol,proto3" json:"protocol,omitempty"`
	Port     int32     `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty"`
	Verb     string    `protobuf:"bytes,5,opt,name=verb,proto3" json:"verb,omitempty"`
	Headers  []*Header `protobuf:"bytes,6,rep,name=headers" json:"headers,omitempty"`
	Body     string    `protobuf:"bytes,7,opt,name=body,proto3" json:"body,omitempty"`
}

func (m *HttpCheck) Reset()         { *m = HttpCheck{} }
func (m *HttpCheck) String() string { return proto.CompactTextString(m) }
func (*HttpCheck) ProtoMessage()    {}

func (m *HttpCheck) GetHeaders() []*Header {
	if m != nil {
		return m.Headers
	}
	return nil
}

type CloudWatchCheck struct {
	Target         *Target  `protobuf:"bytes,1,opt,name=target" json:"target,omitempty"`
	MetricName     string   `protobuf:"bytes,2,opt,name=metric_name,proto3" json:"metric_name,omitempty"`
	Function       string   `protobuf:"bytes,3,opt,name=function,proto3" json:"function,omitempty"`
	FunctionParams []string `protobuf:"bytes,4,rep,name=function_params" json:"function_params,omitempty"`
}

func (m *CloudWatchCheck) Reset()         { *m = CloudWatchCheck{} }
func (m *CloudWatchCheck) String() string { return proto.CompactTextString(m) }
func (*CloudWatchCheck) ProtoMessage()    {}

func (m *CloudWatchCheck) GetTarget() *Target {
	if m != nil {
		return m.Target
	}
	return nil
}

type Metric struct {
	Name      string                     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value     float64                    `protobuf:"fixed64,2,opt,name=value,proto3" json:"value,omitempty"`
	Tags      []string                   `protobuf:"bytes,3,rep,name=tags" json:"tags,omitempty"`
	Timestamp *google_protobuf.Timestamp `protobuf:"bytes,4,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (m *Metric) Reset()         { *m = Metric{} }
func (m *Metric) String() string { return proto.CompactTextString(m) }
func (*Metric) ProtoMessage()    {}

func (m *Metric) GetTimestamp() *google_protobuf.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

type HttpResponse struct {
	Code    int32     `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Body    string    `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
	Headers []*Header `protobuf:"bytes,3,rep,name=headers" json:"headers,omitempty"`
	Metrics []*Metric `protobuf:"bytes,4,rep,name=metrics" json:"metrics,omitempty"`
	Host    string    `protobuf:"bytes,5,opt,name=host,proto3" json:"host,omitempty"`
}

func (m *HttpResponse) Reset()         { *m = HttpResponse{} }
func (m *HttpResponse) String() string { return proto.CompactTextString(m) }
func (*HttpResponse) ProtoMessage()    {}

func (m *HttpResponse) GetHeaders() []*Header {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *HttpResponse) GetMetrics() []*Metric {
	if m != nil {
		return m.Metrics
	}
	return nil
}

type CheckResourceResponse struct {
	Id    string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Check *Check `protobuf:"bytes,2,opt,name=check" json:"check,omitempty"`
	Error string `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *CheckResourceResponse) Reset()         { *m = CheckResourceResponse{} }
func (m *CheckResourceResponse) String() string { return proto.CompactTextString(m) }
func (*CheckResourceResponse) ProtoMessage()    {}

func (m *CheckResourceResponse) GetCheck() *Check {
	if m != nil {
		return m.Check
	}
	return nil
}

type ResourceResponse struct {
	Responses []*CheckResourceResponse `protobuf:"bytes,1,rep,name=responses" json:"responses,omitempty"`
}

func (m *ResourceResponse) Reset()         { *m = ResourceResponse{} }
func (m *ResourceResponse) String() string { return proto.CompactTextString(m) }
func (*ResourceResponse) ProtoMessage()    {}

func (m *ResourceResponse) GetResponses() []*CheckResourceResponse {
	if m != nil {
		return m.Responses
	}
	return nil
}

type CheckResourceRequest struct {
	Checks []*Check `protobuf:"bytes,1,rep,name=checks" json:"checks,omitempty"`
}

func (m *CheckResourceRequest) Reset()         { *m = CheckResourceRequest{} }
func (m *CheckResourceRequest) String() string { return proto.CompactTextString(m) }
func (*CheckResourceRequest) ProtoMessage()    {}

func (m *CheckResourceRequest) GetChecks() []*Check {
	if m != nil {
		return m.Checks
	}
	return nil
}

type TestCheckRequest struct {
	MaxHosts int32                      `protobuf:"varint,1,opt,name=max_hosts,proto3" json:"max_hosts,omitempty"`
	Deadline *google_protobuf.Timestamp `protobuf:"bytes,2,opt,name=deadline" json:"deadline,omitempty"`
	Check    *Check                     `protobuf:"bytes,3,opt,name=check" json:"check,omitempty"`
}

func (m *TestCheckRequest) Reset()         { *m = TestCheckRequest{} }
func (m *TestCheckRequest) String() string { return proto.CompactTextString(m) }
func (*TestCheckRequest) ProtoMessage()    {}

func (m *TestCheckRequest) GetDeadline() *google_protobuf.Timestamp {
	if m != nil {
		return m.Deadline
	}
	return nil
}

func (m *TestCheckRequest) GetCheck() *Check {
	if m != nil {
		return m.Check
	}
	return nil
}

type TestCheckResponse struct {
	Responses []*CheckResponse `protobuf:"bytes,1,rep,name=responses" json:"responses,omitempty"`
	Error     string           `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *TestCheckResponse) Reset()         { *m = TestCheckResponse{} }
func (m *TestCheckResponse) String() string { return proto.CompactTextString(m) }
func (*TestCheckResponse) ProtoMessage()    {}

func (m *TestCheckResponse) GetResponses() []*CheckResponse {
	if m != nil {
		return m.Responses
	}
	return nil
}

type CheckResponse struct {
	Target   *Target               `protobuf:"bytes,1,opt,name=target" json:"target,omitempty"`
	Response *google_protobuf2.Any `protobuf:"bytes,2,opt,name=response" json:"response,omitempty"`
	Error    string                `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
	Passing  bool                  `protobuf:"varint,4,opt,name=passing,proto3" json:"passing,omitempty"`
}

func (m *CheckResponse) Reset()         { *m = CheckResponse{} }
func (m *CheckResponse) String() string { return proto.CompactTextString(m) }
func (*CheckResponse) ProtoMessage()    {}

func (m *CheckResponse) GetTarget() *Target {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *CheckResponse) GetResponse() *google_protobuf2.Any {
	if m != nil {
		return m.Response
	}
	return nil
}

type CheckResult struct {
	CheckId    string                     `protobuf:"bytes,1,opt,name=check_id,proto3" json:"check_id,omitempty"`
	CustomerId string                     `protobuf:"bytes,2,opt,name=customer_id,proto3" json:"customer_id,omitempty"`
	Timestamp  *google_protobuf.Timestamp `protobuf:"bytes,3,opt,name=timestamp" json:"timestamp,omitempty"`
	Passing    bool                       `protobuf:"varint,4,opt,name=passing,proto3" json:"passing,omitempty"`
	Responses  []*CheckResponse           `protobuf:"bytes,5,rep,name=responses" json:"responses,omitempty"`
	Target     *Target                    `protobuf:"bytes,6,opt,name=target" json:"target,omitempty"`
	CheckName  string                     `protobuf:"bytes,7,opt,name=check_name,proto3" json:"check_name,omitempty"`
	Version    int32                      `protobuf:"varint,8,opt,name=version,proto3" json:"version,omitempty"`
}

func (m *CheckResult) Reset()         { *m = CheckResult{} }
func (m *CheckResult) String() string { return proto.CompactTextString(m) }
func (*CheckResult) ProtoMessage()    {}

func (m *CheckResult) GetTimestamp() *google_protobuf.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *CheckResult) GetResponses() []*CheckResponse {
	if m != nil {
		return m.Responses
	}
	return nil
}

func (m *CheckResult) GetTarget() *Target {
	if m != nil {
		return m.Target
	}
	return nil
}

func init() {
	proto.RegisterType((*Target)(nil), "opsee.Target")
	proto.RegisterType((*Check)(nil), "opsee.Check")
	proto.RegisterType((*Assertion)(nil), "opsee.Assertion")
	proto.RegisterType((*Header)(nil), "opsee.Header")
	proto.RegisterType((*HttpCheck)(nil), "opsee.HttpCheck")
	proto.RegisterType((*CloudWatchCheck)(nil), "opsee.CloudWatchCheck")
	proto.RegisterType((*Metric)(nil), "opsee.Metric")
	proto.RegisterType((*HttpResponse)(nil), "opsee.HttpResponse")
	proto.RegisterType((*CheckResourceResponse)(nil), "opsee.CheckResourceResponse")
	proto.RegisterType((*ResourceResponse)(nil), "opsee.ResourceResponse")
	proto.RegisterType((*CheckResourceRequest)(nil), "opsee.CheckResourceRequest")
	proto.RegisterType((*TestCheckRequest)(nil), "opsee.TestCheckRequest")
	proto.RegisterType((*TestCheckResponse)(nil), "opsee.TestCheckResponse")
	proto.RegisterType((*CheckResponse)(nil), "opsee.CheckResponse")
	proto.RegisterType((*CheckResult)(nil), "opsee.CheckResult")
}
func (this *Target) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Target)
	if !ok {
		that2, ok := that.(Target)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Address != that1.Address {
		return false
	}
	return true
}
func (this *Check) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Check)
	if !ok {
		that2, ok := that.(Check)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Interval != that1.Interval {
		return false
	}
	if !this.Target.Equal(that1.Target) {
		return false
	}
	if !this.LastRun.Equal(that1.LastRun) {
		return false
	}
	if !this.CheckSpec.Equal(that1.CheckSpec) {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if len(this.Assertions) != len(that1.Assertions) {
		return false
	}
	for i := range this.Assertions {
		if !this.Assertions[i].Equal(that1.Assertions[i]) {
			return false
		}
	}
	if len(this.Results) != len(that1.Results) {
		return false
	}
	for i := range this.Results {
		if !this.Results[i].Equal(that1.Results[i]) {
			return false
		}
	}
	return true
}
func (this *Assertion) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Assertion)
	if !ok {
		that2, ok := that.(Assertion)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	if this.Relationship != that1.Relationship {
		return false
	}
	if this.Operand != that1.Operand {
		return false
	}
	return true
}
func (this *Header) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Header)
	if !ok {
		that2, ok := that.(Header)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if len(this.Values) != len(that1.Values) {
		return false
	}
	for i := range this.Values {
		if this.Values[i] != that1.Values[i] {
			return false
		}
	}
	return true
}
func (this *HttpCheck) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*HttpCheck)
	if !ok {
		that2, ok := that.(HttpCheck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Path != that1.Path {
		return false
	}
	if this.Protocol != that1.Protocol {
		return false
	}
	if this.Port != that1.Port {
		return false
	}
	if this.Verb != that1.Verb {
		return false
	}
	if len(this.Headers) != len(that1.Headers) {
		return false
	}
	for i := range this.Headers {
		if !this.Headers[i].Equal(that1.Headers[i]) {
			return false
		}
	}
	if this.Body != that1.Body {
		return false
	}
	return true
}
func (this *CloudWatchCheck) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CloudWatchCheck)
	if !ok {
		that2, ok := that.(CloudWatchCheck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Target.Equal(that1.Target) {
		return false
	}
	if this.MetricName != that1.MetricName {
		return false
	}
	if this.Function != that1.Function {
		return false
	}
	if len(this.FunctionParams) != len(that1.FunctionParams) {
		return false
	}
	for i := range this.FunctionParams {
		if this.FunctionParams[i] != that1.FunctionParams[i] {
			return false
		}
	}
	return true
}
func (this *Metric) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Metric)
	if !ok {
		that2, ok := that.(Metric)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	if len(this.Tags) != len(that1.Tags) {
		return false
	}
	for i := range this.Tags {
		if this.Tags[i] != that1.Tags[i] {
			return false
		}
	}
	if !this.Timestamp.Equal(that1.Timestamp) {
		return false
	}
	return true
}
func (this *HttpResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*HttpResponse)
	if !ok {
		that2, ok := that.(HttpResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Body != that1.Body {
		return false
	}
	if len(this.Headers) != len(that1.Headers) {
		return false
	}
	for i := range this.Headers {
		if !this.Headers[i].Equal(that1.Headers[i]) {
			return false
		}
	}
	if len(this.Metrics) != len(that1.Metrics) {
		return false
	}
	for i := range this.Metrics {
		if !this.Metrics[i].Equal(that1.Metrics[i]) {
			return false
		}
	}
	if this.Host != that1.Host {
		return false
	}
	return true
}
func (this *CheckResourceResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CheckResourceResponse)
	if !ok {
		that2, ok := that.(CheckResourceResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if !this.Check.Equal(that1.Check) {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *ResourceResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ResourceResponse)
	if !ok {
		that2, ok := that.(ResourceResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Responses) != len(that1.Responses) {
		return false
	}
	for i := range this.Responses {
		if !this.Responses[i].Equal(that1.Responses[i]) {
			return false
		}
	}
	return true
}
func (this *CheckResourceRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CheckResourceRequest)
	if !ok {
		that2, ok := that.(CheckResourceRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Checks) != len(that1.Checks) {
		return false
	}
	for i := range this.Checks {
		if !this.Checks[i].Equal(that1.Checks[i]) {
			return false
		}
	}
	return true
}
func (this *TestCheckRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*TestCheckRequest)
	if !ok {
		that2, ok := that.(TestCheckRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.MaxHosts != that1.MaxHosts {
		return false
	}
	if !this.Deadline.Equal(that1.Deadline) {
		return false
	}
	if !this.Check.Equal(that1.Check) {
		return false
	}
	return true
}
func (this *TestCheckResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*TestCheckResponse)
	if !ok {
		that2, ok := that.(TestCheckResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Responses) != len(that1.Responses) {
		return false
	}
	for i := range this.Responses {
		if !this.Responses[i].Equal(that1.Responses[i]) {
			return false
		}
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *CheckResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CheckResponse)
	if !ok {
		that2, ok := that.(CheckResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Target.Equal(that1.Target) {
		return false
	}
	if !this.Response.Equal(that1.Response) {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	if this.Passing != that1.Passing {
		return false
	}
	return true
}
func (this *CheckResult) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CheckResult)
	if !ok {
		that2, ok := that.(CheckResult)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.CheckId != that1.CheckId {
		return false
	}
	if this.CustomerId != that1.CustomerId {
		return false
	}
	if !this.Timestamp.Equal(that1.Timestamp) {
		return false
	}
	if this.Passing != that1.Passing {
		return false
	}
	if len(this.Responses) != len(that1.Responses) {
		return false
	}
	for i := range this.Responses {
		if !this.Responses[i].Equal(that1.Responses[i]) {
			return false
		}
	}
	if !this.Target.Equal(that1.Target) {
		return false
	}
	if this.CheckName != that1.CheckName {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	return true
}

type TargetGetter interface {
	GetTarget() *Target
}

var GraphQLTargetType *github_com_graphql_go_graphql.Object

type CheckGetter interface {
	GetCheck() *Check
}

var GraphQLCheckType *github_com_graphql_go_graphql.Object

type AssertionGetter interface {
	GetAssertion() *Assertion
}

var GraphQLAssertionType *github_com_graphql_go_graphql.Object

type HeaderGetter interface {
	GetHeader() *Header
}

var GraphQLHeaderType *github_com_graphql_go_graphql.Object

type HttpCheckGetter interface {
	GetHttpCheck() *HttpCheck
}

var GraphQLHttpCheckType *github_com_graphql_go_graphql.Object

type CloudWatchCheckGetter interface {
	GetCloudWatchCheck() *CloudWatchCheck
}

var GraphQLCloudWatchCheckType *github_com_graphql_go_graphql.Object

type MetricGetter interface {
	GetMetric() *Metric
}

var GraphQLMetricType *github_com_graphql_go_graphql.Object

type HttpResponseGetter interface {
	GetHttpResponse() *HttpResponse
}

var GraphQLHttpResponseType *github_com_graphql_go_graphql.Object

type CheckResourceResponseGetter interface {
	GetCheckResourceResponse() *CheckResourceResponse
}

var GraphQLCheckResourceResponseType *github_com_graphql_go_graphql.Object

type ResourceResponseGetter interface {
	GetResourceResponse() *ResourceResponse
}

var GraphQLResourceResponseType *github_com_graphql_go_graphql.Object

type CheckResourceRequestGetter interface {
	GetCheckResourceRequest() *CheckResourceRequest
}

var GraphQLCheckResourceRequestType *github_com_graphql_go_graphql.Object

type TestCheckRequestGetter interface {
	GetTestCheckRequest() *TestCheckRequest
}

var GraphQLTestCheckRequestType *github_com_graphql_go_graphql.Object

type TestCheckResponseGetter interface {
	GetTestCheckResponse() *TestCheckResponse
}

var GraphQLTestCheckResponseType *github_com_graphql_go_graphql.Object

type CheckResponseGetter interface {
	GetCheckResponse() *CheckResponse
}

var GraphQLCheckResponseType *github_com_graphql_go_graphql.Object

type CheckResultGetter interface {
	GetCheckResult() *CheckResult
}

var GraphQLCheckResultType *github_com_graphql_go_graphql.Object

func init() {
	GraphQLTargetType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "schemaTarget",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"name": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Target)
						if ok {
							return obj.Name, nil
						}
						inter, ok := p.Source.(TargetGetter)
						if ok {
							face := inter.GetTarget()
							if face == nil {
								return nil, nil
							}
							return face.Name, nil
						}
						return nil, fmt.Errorf("field name not resolved")
					},
				},
				"type": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Target)
						if ok {
							return obj.Type, nil
						}
						inter, ok := p.Source.(TargetGetter)
						if ok {
							face := inter.GetTarget()
							if face == nil {
								return nil, nil
							}
							return face.Type, nil
						}
						return nil, fmt.Errorf("field type not resolved")
					},
				},
				"id": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Target)
						if ok {
							return obj.Id, nil
						}
						inter, ok := p.Source.(TargetGetter)
						if ok {
							face := inter.GetTarget()
							if face == nil {
								return nil, nil
							}
							return face.Id, nil
						}
						return nil, fmt.Errorf("field id not resolved")
					},
				},
				"address": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Target)
						if ok {
							return obj.Address, nil
						}
						inter, ok := p.Source.(TargetGetter)
						if ok {
							face := inter.GetTarget()
							if face == nil {
								return nil, nil
							}
							return face.Address, nil
						}
						return nil, fmt.Errorf("field address not resolved")
					},
				},
			}
		}),
	})
	GraphQLCheckType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "schemaCheck",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"id": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Check)
						if ok {
							return obj.Id, nil
						}
						inter, ok := p.Source.(CheckGetter)
						if ok {
							face := inter.GetCheck()
							if face == nil {
								return nil, nil
							}
							return face.Id, nil
						}
						return nil, fmt.Errorf("field id not resolved")
					},
				},
				"interval": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Check)
						if ok {
							return obj.Interval, nil
						}
						inter, ok := p.Source.(CheckGetter)
						if ok {
							face := inter.GetCheck()
							if face == nil {
								return nil, nil
							}
							return face.Interval, nil
						}
						return nil, fmt.Errorf("field interval not resolved")
					},
				},
				"target": &github_com_graphql_go_graphql.Field{
					Type:        GraphQLTargetType,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Check)
						if ok {
							if obj.Target == nil {
								return nil, nil
							}
							return obj.GetTarget(), nil
						}
						inter, ok := p.Source.(CheckGetter)
						if ok {
							face := inter.GetCheck()
							if face == nil {
								return nil, nil
							}
							if face.Target == nil {
								return nil, nil
							}
							return face.GetTarget(), nil
						}
						return nil, fmt.Errorf("field target not resolved")
					},
				},
				"last_run": &github_com_graphql_go_graphql.Field{
					Type:        github_com_opsee_protobuf_opseeproto.ByteString,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Check)
						if ok {
							if obj.LastRun == nil {
								return nil, nil
							}
							return obj.GetLastRun(), nil
						}
						inter, ok := p.Source.(CheckGetter)
						if ok {
							face := inter.GetCheck()
							if face == nil {
								return nil, nil
							}
							if face.LastRun == nil {
								return nil, nil
							}
							return face.GetLastRun(), nil
						}
						return nil, fmt.Errorf("field last_run not resolved")
					},
				},
				"check_spec": &github_com_graphql_go_graphql.Field{
					Type:        github_com_opsee_protobuf_opseeproto.ByteString,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Check)
						if ok {
							if obj.CheckSpec == nil {
								return nil, nil
							}
							return obj.GetCheckSpec(), nil
						}
						inter, ok := p.Source.(CheckGetter)
						if ok {
							face := inter.GetCheck()
							if face == nil {
								return nil, nil
							}
							if face.CheckSpec == nil {
								return nil, nil
							}
							return face.GetCheckSpec(), nil
						}
						return nil, fmt.Errorf("field check_spec not resolved")
					},
				},
				"name": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Check)
						if ok {
							return obj.Name, nil
						}
						inter, ok := p.Source.(CheckGetter)
						if ok {
							face := inter.GetCheck()
							if face == nil {
								return nil, nil
							}
							return face.Name, nil
						}
						return nil, fmt.Errorf("field name not resolved")
					},
				},
				"assertions": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(GraphQLAssertionType),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Check)
						if ok {
							return obj.Assertions, nil
						}
						inter, ok := p.Source.(CheckGetter)
						if ok {
							face := inter.GetCheck()
							if face == nil {
								return nil, nil
							}
							return face.Assertions, nil
						}
						return nil, fmt.Errorf("field assertions not resolved")
					},
				},
				"results": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(GraphQLCheckResultType),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Check)
						if ok {
							return obj.Results, nil
						}
						inter, ok := p.Source.(CheckGetter)
						if ok {
							face := inter.GetCheck()
							if face == nil {
								return nil, nil
							}
							return face.Results, nil
						}
						return nil, fmt.Errorf("field results not resolved")
					},
				},
			}
		}),
	})
	GraphQLAssertionType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "schemaAssertion",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"key": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "key is one of \"code\", \"header\", \"body\".",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Assertion)
						if ok {
							return obj.Key, nil
						}
						inter, ok := p.Source.(AssertionGetter)
						if ok {
							face := inter.GetAssertion()
							if face == nil {
								return nil, nil
							}
							return face.Key, nil
						}
						return nil, fmt.Errorf("field key not resolved")
					},
				},
				"value": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "In the case of key=header, value would be the header field.",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Assertion)
						if ok {
							return obj.Value, nil
						}
						inter, ok := p.Source.(AssertionGetter)
						if ok {
							face := inter.GetAssertion()
							if face == nil {
								return nil, nil
							}
							return face.Value, nil
						}
						return nil, fmt.Errorf("field value not resolved")
					},
				},
				"relationship": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "relationship is one of: \"equal\" \"notEqual\" \"empty\" \"notEmpty\" \"contain\" \"notContain\" \"regExp\"",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Assertion)
						if ok {
							return obj.Relationship, nil
						}
						inter, ok := p.Source.(AssertionGetter)
						if ok {
							face := inter.GetAssertion()
							if face == nil {
								return nil, nil
							}
							return face.Relationship, nil
						}
						return nil, fmt.Errorf("field relationship not resolved")
					},
				},
				"operand": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Assertion)
						if ok {
							return obj.Operand, nil
						}
						inter, ok := p.Source.(AssertionGetter)
						if ok {
							face := inter.GetAssertion()
							if face == nil {
								return nil, nil
							}
							return face.Operand, nil
						}
						return nil, fmt.Errorf("field operand not resolved")
					},
				},
			}
		}),
	})
	GraphQLHeaderType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "schemaHeader",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"name": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Header)
						if ok {
							return obj.Name, nil
						}
						inter, ok := p.Source.(HeaderGetter)
						if ok {
							face := inter.GetHeader()
							if face == nil {
								return nil, nil
							}
							return face.Name, nil
						}
						return nil, fmt.Errorf("field name not resolved")
					},
				},
				"values": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(github_com_graphql_go_graphql.String),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Header)
						if ok {
							return obj.Values, nil
						}
						inter, ok := p.Source.(HeaderGetter)
						if ok {
							face := inter.GetHeader()
							if face == nil {
								return nil, nil
							}
							return face.Values, nil
						}
						return nil, fmt.Errorf("field values not resolved")
					},
				},
			}
		}),
	})
	GraphQLHttpCheckType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "schemaHttpCheck",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"name": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*HttpCheck)
						if ok {
							return obj.Name, nil
						}
						inter, ok := p.Source.(HttpCheckGetter)
						if ok {
							face := inter.GetHttpCheck()
							if face == nil {
								return nil, nil
							}
							return face.Name, nil
						}
						return nil, fmt.Errorf("field name not resolved")
					},
				},
				"path": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*HttpCheck)
						if ok {
							return obj.Path, nil
						}
						inter, ok := p.Source.(HttpCheckGetter)
						if ok {
							face := inter.GetHttpCheck()
							if face == nil {
								return nil, nil
							}
							return face.Path, nil
						}
						return nil, fmt.Errorf("field path not resolved")
					},
				},
				"protocol": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*HttpCheck)
						if ok {
							return obj.Protocol, nil
						}
						inter, ok := p.Source.(HttpCheckGetter)
						if ok {
							face := inter.GetHttpCheck()
							if face == nil {
								return nil, nil
							}
							return face.Protocol, nil
						}
						return nil, fmt.Errorf("field protocol not resolved")
					},
				},
				"port": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*HttpCheck)
						if ok {
							return obj.Port, nil
						}
						inter, ok := p.Source.(HttpCheckGetter)
						if ok {
							face := inter.GetHttpCheck()
							if face == nil {
								return nil, nil
							}
							return face.Port, nil
						}
						return nil, fmt.Errorf("field port not resolved")
					},
				},
				"verb": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*HttpCheck)
						if ok {
							return obj.Verb, nil
						}
						inter, ok := p.Source.(HttpCheckGetter)
						if ok {
							face := inter.GetHttpCheck()
							if face == nil {
								return nil, nil
							}
							return face.Verb, nil
						}
						return nil, fmt.Errorf("field verb not resolved")
					},
				},
				"headers": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(GraphQLHeaderType),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*HttpCheck)
						if ok {
							return obj.Headers, nil
						}
						inter, ok := p.Source.(HttpCheckGetter)
						if ok {
							face := inter.GetHttpCheck()
							if face == nil {
								return nil, nil
							}
							return face.Headers, nil
						}
						return nil, fmt.Errorf("field headers not resolved")
					},
				},
				"body": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*HttpCheck)
						if ok {
							return obj.Body, nil
						}
						inter, ok := p.Source.(HttpCheckGetter)
						if ok {
							face := inter.GetHttpCheck()
							if face == nil {
								return nil, nil
							}
							return face.Body, nil
						}
						return nil, fmt.Errorf("field body not resolved")
					},
				},
			}
		}),
	})
	GraphQLCloudWatchCheckType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "schemaCloudWatchCheck",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"target": &github_com_graphql_go_graphql.Field{
					Type:        GraphQLTargetType,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*CloudWatchCheck)
						if ok {
							if obj.Target == nil {
								return nil, nil
							}
							return obj.GetTarget(), nil
						}
						inter, ok := p.Source.(CloudWatchCheckGetter)
						if ok {
							face := inter.GetCloudWatchCheck()
							if face == nil {
								return nil, nil
							}
							if face.Target == nil {
								return nil, nil
							}
							return face.GetTarget(), nil
						}
						return nil, fmt.Errorf("field target not resolved")
					},
				},
				"metric_name": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*CloudWatchCheck)
						if ok {
							return obj.MetricName, nil
						}
						inter, ok := p.Source.(CloudWatchCheckGetter)
						if ok {
							face := inter.GetCloudWatchCheck()
							if face == nil {
								return nil, nil
							}
							return face.MetricName, nil
						}
						return nil, fmt.Errorf("field metric_name not resolved")
					},
				},
				"function": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*CloudWatchCheck)
						if ok {
							return obj.Function, nil
						}
						inter, ok := p.Source.(CloudWatchCheckGetter)
						if ok {
							face := inter.GetCloudWatchCheck()
							if face == nil {
								return nil, nil
							}
							return face.Function, nil
						}
						return nil, fmt.Errorf("field function not resolved")
					},
				},
				"function_params": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(github_com_graphql_go_graphql.String),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*CloudWatchCheck)
						if ok {
							return obj.FunctionParams, nil
						}
						inter, ok := p.Source.(CloudWatchCheckGetter)
						if ok {
							face := inter.GetCloudWatchCheck()
							if face == nil {
								return nil, nil
							}
							return face.FunctionParams, nil
						}
						return nil, fmt.Errorf("field function_params not resolved")
					},
				},
			}
		}),
	})
	GraphQLMetricType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "schemaMetric",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"name": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Metric)
						if ok {
							return obj.Name, nil
						}
						inter, ok := p.Source.(MetricGetter)
						if ok {
							face := inter.GetMetric()
							if face == nil {
								return nil, nil
							}
							return face.Name, nil
						}
						return nil, fmt.Errorf("field name not resolved")
					},
				},
				"value": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Float,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Metric)
						if ok {
							return obj.Value, nil
						}
						inter, ok := p.Source.(MetricGetter)
						if ok {
							face := inter.GetMetric()
							if face == nil {
								return nil, nil
							}
							return face.Value, nil
						}
						return nil, fmt.Errorf("field value not resolved")
					},
				},
				"tags": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(github_com_graphql_go_graphql.String),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Metric)
						if ok {
							return obj.Tags, nil
						}
						inter, ok := p.Source.(MetricGetter)
						if ok {
							face := inter.GetMetric()
							if face == nil {
								return nil, nil
							}
							return face.Tags, nil
						}
						return nil, fmt.Errorf("field tags not resolved")
					},
				},
				"timestamp": &github_com_graphql_go_graphql.Field{
					Type:        github_com_opsee_protobuf_opseeproto.ByteString,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Metric)
						if ok {
							if obj.Timestamp == nil {
								return nil, nil
							}
							return obj.GetTimestamp(), nil
						}
						inter, ok := p.Source.(MetricGetter)
						if ok {
							face := inter.GetMetric()
							if face == nil {
								return nil, nil
							}
							if face.Timestamp == nil {
								return nil, nil
							}
							return face.GetTimestamp(), nil
						}
						return nil, fmt.Errorf("field timestamp not resolved")
					},
				},
			}
		}),
	})
	GraphQLHttpResponseType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "schemaHttpResponse",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"code": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*HttpResponse)
						if ok {
							return obj.Code, nil
						}
						inter, ok := p.Source.(HttpResponseGetter)
						if ok {
							face := inter.GetHttpResponse()
							if face == nil {
								return nil, nil
							}
							return face.Code, nil
						}
						return nil, fmt.Errorf("field code not resolved")
					},
				},
				"body": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*HttpResponse)
						if ok {
							return obj.Body, nil
						}
						inter, ok := p.Source.(HttpResponseGetter)
						if ok {
							face := inter.GetHttpResponse()
							if face == nil {
								return nil, nil
							}
							return face.Body, nil
						}
						return nil, fmt.Errorf("field body not resolved")
					},
				},
				"headers": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(GraphQLHeaderType),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*HttpResponse)
						if ok {
							return obj.Headers, nil
						}
						inter, ok := p.Source.(HttpResponseGetter)
						if ok {
							face := inter.GetHttpResponse()
							if face == nil {
								return nil, nil
							}
							return face.Headers, nil
						}
						return nil, fmt.Errorf("field headers not resolved")
					},
				},
				"metrics": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(GraphQLMetricType),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*HttpResponse)
						if ok {
							return obj.Metrics, nil
						}
						inter, ok := p.Source.(HttpResponseGetter)
						if ok {
							face := inter.GetHttpResponse()
							if face == nil {
								return nil, nil
							}
							return face.Metrics, nil
						}
						return nil, fmt.Errorf("field metrics not resolved")
					},
				},
				"host": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*HttpResponse)
						if ok {
							return obj.Host, nil
						}
						inter, ok := p.Source.(HttpResponseGetter)
						if ok {
							face := inter.GetHttpResponse()
							if face == nil {
								return nil, nil
							}
							return face.Host, nil
						}
						return nil, fmt.Errorf("field host not resolved")
					},
				},
			}
		}),
	})
	GraphQLCheckResourceResponseType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "schemaCheckResourceResponse",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"id": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*CheckResourceResponse)
						if ok {
							return obj.Id, nil
						}
						inter, ok := p.Source.(CheckResourceResponseGetter)
						if ok {
							face := inter.GetCheckResourceResponse()
							if face == nil {
								return nil, nil
							}
							return face.Id, nil
						}
						return nil, fmt.Errorf("field id not resolved")
					},
				},
				"check": &github_com_graphql_go_graphql.Field{
					Type:        GraphQLCheckType,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*CheckResourceResponse)
						if ok {
							if obj.Check == nil {
								return nil, nil
							}
							return obj.GetCheck(), nil
						}
						inter, ok := p.Source.(CheckResourceResponseGetter)
						if ok {
							face := inter.GetCheckResourceResponse()
							if face == nil {
								return nil, nil
							}
							if face.Check == nil {
								return nil, nil
							}
							return face.GetCheck(), nil
						}
						return nil, fmt.Errorf("field check not resolved")
					},
				},
				"error": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*CheckResourceResponse)
						if ok {
							return obj.Error, nil
						}
						inter, ok := p.Source.(CheckResourceResponseGetter)
						if ok {
							face := inter.GetCheckResourceResponse()
							if face == nil {
								return nil, nil
							}
							return face.Error, nil
						}
						return nil, fmt.Errorf("field error not resolved")
					},
				},
			}
		}),
	})
	GraphQLResourceResponseType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "schemaResourceResponse",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"responses": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(GraphQLCheckResourceResponseType),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*ResourceResponse)
						if ok {
							return obj.Responses, nil
						}
						inter, ok := p.Source.(ResourceResponseGetter)
						if ok {
							face := inter.GetResourceResponse()
							if face == nil {
								return nil, nil
							}
							return face.Responses, nil
						}
						return nil, fmt.Errorf("field responses not resolved")
					},
				},
			}
		}),
	})
	GraphQLCheckResourceRequestType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "schemaCheckResourceRequest",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"checks": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(GraphQLCheckType),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*CheckResourceRequest)
						if ok {
							return obj.Checks, nil
						}
						inter, ok := p.Source.(CheckResourceRequestGetter)
						if ok {
							face := inter.GetCheckResourceRequest()
							if face == nil {
								return nil, nil
							}
							return face.Checks, nil
						}
						return nil, fmt.Errorf("field checks not resolved")
					},
				},
			}
		}),
	})
	GraphQLTestCheckRequestType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "schemaTestCheckRequest",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"max_hosts": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*TestCheckRequest)
						if ok {
							return obj.MaxHosts, nil
						}
						inter, ok := p.Source.(TestCheckRequestGetter)
						if ok {
							face := inter.GetTestCheckRequest()
							if face == nil {
								return nil, nil
							}
							return face.MaxHosts, nil
						}
						return nil, fmt.Errorf("field max_hosts not resolved")
					},
				},
				"deadline": &github_com_graphql_go_graphql.Field{
					Type:        github_com_opsee_protobuf_opseeproto.ByteString,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*TestCheckRequest)
						if ok {
							if obj.Deadline == nil {
								return nil, nil
							}
							return obj.GetDeadline(), nil
						}
						inter, ok := p.Source.(TestCheckRequestGetter)
						if ok {
							face := inter.GetTestCheckRequest()
							if face == nil {
								return nil, nil
							}
							if face.Deadline == nil {
								return nil, nil
							}
							return face.GetDeadline(), nil
						}
						return nil, fmt.Errorf("field deadline not resolved")
					},
				},
				"check": &github_com_graphql_go_graphql.Field{
					Type:        GraphQLCheckType,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*TestCheckRequest)
						if ok {
							if obj.Check == nil {
								return nil, nil
							}
							return obj.GetCheck(), nil
						}
						inter, ok := p.Source.(TestCheckRequestGetter)
						if ok {
							face := inter.GetTestCheckRequest()
							if face == nil {
								return nil, nil
							}
							if face.Check == nil {
								return nil, nil
							}
							return face.GetCheck(), nil
						}
						return nil, fmt.Errorf("field check not resolved")
					},
				},
			}
		}),
	})
	GraphQLTestCheckResponseType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "schemaTestCheckResponse",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"responses": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(GraphQLCheckResponseType),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*TestCheckResponse)
						if ok {
							return obj.Responses, nil
						}
						inter, ok := p.Source.(TestCheckResponseGetter)
						if ok {
							face := inter.GetTestCheckResponse()
							if face == nil {
								return nil, nil
							}
							return face.Responses, nil
						}
						return nil, fmt.Errorf("field responses not resolved")
					},
				},
				"error": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*TestCheckResponse)
						if ok {
							return obj.Error, nil
						}
						inter, ok := p.Source.(TestCheckResponseGetter)
						if ok {
							face := inter.GetTestCheckResponse()
							if face == nil {
								return nil, nil
							}
							return face.Error, nil
						}
						return nil, fmt.Errorf("field error not resolved")
					},
				},
			}
		}),
	})
	GraphQLCheckResponseType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "schemaCheckResponse",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"target": &github_com_graphql_go_graphql.Field{
					Type:        GraphQLTargetType,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*CheckResponse)
						if ok {
							if obj.Target == nil {
								return nil, nil
							}
							return obj.GetTarget(), nil
						}
						inter, ok := p.Source.(CheckResponseGetter)
						if ok {
							face := inter.GetCheckResponse()
							if face == nil {
								return nil, nil
							}
							if face.Target == nil {
								return nil, nil
							}
							return face.GetTarget(), nil
						}
						return nil, fmt.Errorf("field target not resolved")
					},
				},
				"response": &github_com_graphql_go_graphql.Field{
					Type:        github_com_opsee_protobuf_opseeproto.ByteString,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*CheckResponse)
						if ok {
							if obj.Response == nil {
								return nil, nil
							}
							return obj.GetResponse(), nil
						}
						inter, ok := p.Source.(CheckResponseGetter)
						if ok {
							face := inter.GetCheckResponse()
							if face == nil {
								return nil, nil
							}
							if face.Response == nil {
								return nil, nil
							}
							return face.GetResponse(), nil
						}
						return nil, fmt.Errorf("field response not resolved")
					},
				},
				"error": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*CheckResponse)
						if ok {
							return obj.Error, nil
						}
						inter, ok := p.Source.(CheckResponseGetter)
						if ok {
							face := inter.GetCheckResponse()
							if face == nil {
								return nil, nil
							}
							return face.Error, nil
						}
						return nil, fmt.Errorf("field error not resolved")
					},
				},
				"passing": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Boolean,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*CheckResponse)
						if ok {
							return obj.Passing, nil
						}
						inter, ok := p.Source.(CheckResponseGetter)
						if ok {
							face := inter.GetCheckResponse()
							if face == nil {
								return nil, nil
							}
							return face.Passing, nil
						}
						return nil, fmt.Errorf("field passing not resolved")
					},
				},
			}
		}),
	})
	GraphQLCheckResultType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "schemaCheckResult",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"check_id": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*CheckResult)
						if ok {
							return obj.CheckId, nil
						}
						inter, ok := p.Source.(CheckResultGetter)
						if ok {
							face := inter.GetCheckResult()
							if face == nil {
								return nil, nil
							}
							return face.CheckId, nil
						}
						return nil, fmt.Errorf("field check_id not resolved")
					},
				},
				"customer_id": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*CheckResult)
						if ok {
							return obj.CustomerId, nil
						}
						inter, ok := p.Source.(CheckResultGetter)
						if ok {
							face := inter.GetCheckResult()
							if face == nil {
								return nil, nil
							}
							return face.CustomerId, nil
						}
						return nil, fmt.Errorf("field customer_id not resolved")
					},
				},
				"timestamp": &github_com_graphql_go_graphql.Field{
					Type:        github_com_opsee_protobuf_opseeproto.ByteString,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*CheckResult)
						if ok {
							if obj.Timestamp == nil {
								return nil, nil
							}
							return obj.GetTimestamp(), nil
						}
						inter, ok := p.Source.(CheckResultGetter)
						if ok {
							face := inter.GetCheckResult()
							if face == nil {
								return nil, nil
							}
							if face.Timestamp == nil {
								return nil, nil
							}
							return face.GetTimestamp(), nil
						}
						return nil, fmt.Errorf("field timestamp not resolved")
					},
				},
				"passing": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Boolean,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*CheckResult)
						if ok {
							return obj.Passing, nil
						}
						inter, ok := p.Source.(CheckResultGetter)
						if ok {
							face := inter.GetCheckResult()
							if face == nil {
								return nil, nil
							}
							return face.Passing, nil
						}
						return nil, fmt.Errorf("field passing not resolved")
					},
				},
				"responses": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(GraphQLCheckResponseType),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*CheckResult)
						if ok {
							return obj.Responses, nil
						}
						inter, ok := p.Source.(CheckResultGetter)
						if ok {
							face := inter.GetCheckResult()
							if face == nil {
								return nil, nil
							}
							return face.Responses, nil
						}
						return nil, fmt.Errorf("field responses not resolved")
					},
				},
				"target": &github_com_graphql_go_graphql.Field{
					Type:        GraphQLTargetType,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*CheckResult)
						if ok {
							if obj.Target == nil {
								return nil, nil
							}
							return obj.GetTarget(), nil
						}
						inter, ok := p.Source.(CheckResultGetter)
						if ok {
							face := inter.GetCheckResult()
							if face == nil {
								return nil, nil
							}
							if face.Target == nil {
								return nil, nil
							}
							return face.GetTarget(), nil
						}
						return nil, fmt.Errorf("field target not resolved")
					},
				},
				"check_name": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*CheckResult)
						if ok {
							return obj.CheckName, nil
						}
						inter, ok := p.Source.(CheckResultGetter)
						if ok {
							face := inter.GetCheckResult()
							if face == nil {
								return nil, nil
							}
							return face.CheckName, nil
						}
						return nil, fmt.Errorf("field check_name not resolved")
					},
				},
				"version": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*CheckResult)
						if ok {
							return obj.Version, nil
						}
						inter, ok := p.Source.(CheckResultGetter)
						if ok {
							face := inter.GetCheckResult()
							if face == nil {
								return nil, nil
							}
							return face.Version, nil
						}
						return nil, fmt.Errorf("field version not resolved")
					},
				},
			}
		}),
	})
}
func NewPopulatedTarget(r randyChecks, easy bool) *Target {
	this := &Target{}
	this.Name = randStringChecks(r)
	this.Type = randStringChecks(r)
	this.Id = randStringChecks(r)
	this.Address = randStringChecks(r)
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedCheck(r randyChecks, easy bool) *Check {
	this := &Check{}
	this.Id = randStringChecks(r)
	this.Interval = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Interval *= -1
	}
	if r.Intn(10) != 0 {
		this.Target = NewPopulatedTarget(r, easy)
	}
	if r.Intn(10) != 0 {
		this.LastRun = google_protobuf.NewPopulatedTimestamp(r, easy)
	}
	if r.Intn(10) != 0 {
		this.CheckSpec = google_protobuf2.NewPopulatedAny(r, easy)
	}
	this.Name = randStringChecks(r)
	if r.Intn(10) != 0 {
		v1 := r.Intn(5)
		this.Assertions = make([]*Assertion, v1)
		for i := 0; i < v1; i++ {
			this.Assertions[i] = NewPopulatedAssertion(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v2 := r.Intn(5)
		this.Results = make([]*CheckResult, v2)
		for i := 0; i < v2; i++ {
			this.Results[i] = NewPopulatedCheckResult(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedAssertion(r randyChecks, easy bool) *Assertion {
	this := &Assertion{}
	this.Key = randStringChecks(r)
	this.Value = randStringChecks(r)
	this.Relationship = randStringChecks(r)
	this.Operand = randStringChecks(r)
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedHeader(r randyChecks, easy bool) *Header {
	this := &Header{}
	this.Name = randStringChecks(r)
	v3 := r.Intn(10)
	this.Values = make([]string, v3)
	for i := 0; i < v3; i++ {
		this.Values[i] = randStringChecks(r)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedHttpCheck(r randyChecks, easy bool) *HttpCheck {
	this := &HttpCheck{}
	this.Name = randStringChecks(r)
	this.Path = randStringChecks(r)
	this.Protocol = randStringChecks(r)
	this.Port = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Port *= -1
	}
	this.Verb = randStringChecks(r)
	if r.Intn(10) != 0 {
		v4 := r.Intn(5)
		this.Headers = make([]*Header, v4)
		for i := 0; i < v4; i++ {
			this.Headers[i] = NewPopulatedHeader(r, easy)
		}
	}
	this.Body = randStringChecks(r)
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedCloudWatchCheck(r randyChecks, easy bool) *CloudWatchCheck {
	this := &CloudWatchCheck{}
	if r.Intn(10) != 0 {
		this.Target = NewPopulatedTarget(r, easy)
	}
	this.MetricName = randStringChecks(r)
	this.Function = randStringChecks(r)
	v5 := r.Intn(10)
	this.FunctionParams = make([]string, v5)
	for i := 0; i < v5; i++ {
		this.FunctionParams[i] = randStringChecks(r)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedMetric(r randyChecks, easy bool) *Metric {
	this := &Metric{}
	this.Name = randStringChecks(r)
	this.Value = float64(r.Float64())
	if r.Intn(2) == 0 {
		this.Value *= -1
	}
	v6 := r.Intn(10)
	this.Tags = make([]string, v6)
	for i := 0; i < v6; i++ {
		this.Tags[i] = randStringChecks(r)
	}
	if r.Intn(10) != 0 {
		this.Timestamp = google_protobuf.NewPopulatedTimestamp(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedHttpResponse(r randyChecks, easy bool) *HttpResponse {
	this := &HttpResponse{}
	this.Code = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Code *= -1
	}
	this.Body = randStringChecks(r)
	if r.Intn(10) != 0 {
		v7 := r.Intn(5)
		this.Headers = make([]*Header, v7)
		for i := 0; i < v7; i++ {
			this.Headers[i] = NewPopulatedHeader(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v8 := r.Intn(5)
		this.Metrics = make([]*Metric, v8)
		for i := 0; i < v8; i++ {
			this.Metrics[i] = NewPopulatedMetric(r, easy)
		}
	}
	this.Host = randStringChecks(r)
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedCheckResourceResponse(r randyChecks, easy bool) *CheckResourceResponse {
	this := &CheckResourceResponse{}
	this.Id = randStringChecks(r)
	if r.Intn(10) != 0 {
		this.Check = NewPopulatedCheck(r, easy)
	}
	this.Error = randStringChecks(r)
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedResourceResponse(r randyChecks, easy bool) *ResourceResponse {
	this := &ResourceResponse{}
	if r.Intn(10) != 0 {
		v9 := r.Intn(5)
		this.Responses = make([]*CheckResourceResponse, v9)
		for i := 0; i < v9; i++ {
			this.Responses[i] = NewPopulatedCheckResourceResponse(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedCheckResourceRequest(r randyChecks, easy bool) *CheckResourceRequest {
	this := &CheckResourceRequest{}
	if r.Intn(10) != 0 {
		v10 := r.Intn(5)
		this.Checks = make([]*Check, v10)
		for i := 0; i < v10; i++ {
			this.Checks[i] = NewPopulatedCheck(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedTestCheckRequest(r randyChecks, easy bool) *TestCheckRequest {
	this := &TestCheckRequest{}
	this.MaxHosts = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.MaxHosts *= -1
	}
	if r.Intn(10) != 0 {
		this.Deadline = google_protobuf.NewPopulatedTimestamp(r, easy)
	}
	if r.Intn(10) != 0 {
		this.Check = NewPopulatedCheck(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedTestCheckResponse(r randyChecks, easy bool) *TestCheckResponse {
	this := &TestCheckResponse{}
	if r.Intn(10) != 0 {
		v11 := r.Intn(5)
		this.Responses = make([]*CheckResponse, v11)
		for i := 0; i < v11; i++ {
			this.Responses[i] = NewPopulatedCheckResponse(r, easy)
		}
	}
	this.Error = randStringChecks(r)
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedCheckResponse(r randyChecks, easy bool) *CheckResponse {
	this := &CheckResponse{}
	if r.Intn(10) != 0 {
		this.Target = NewPopulatedTarget(r, easy)
	}
	if r.Intn(10) != 0 {
		this.Response = google_protobuf2.NewPopulatedAny(r, easy)
	}
	this.Error = randStringChecks(r)
	this.Passing = bool(bool(r.Intn(2) == 0))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedCheckResult(r randyChecks, easy bool) *CheckResult {
	this := &CheckResult{}
	this.CheckId = randStringChecks(r)
	this.CustomerId = randStringChecks(r)
	if r.Intn(10) != 0 {
		this.Timestamp = google_protobuf.NewPopulatedTimestamp(r, easy)
	}
	this.Passing = bool(bool(r.Intn(2) == 0))
	if r.Intn(10) != 0 {
		v12 := r.Intn(5)
		this.Responses = make([]*CheckResponse, v12)
		for i := 0; i < v12; i++ {
			this.Responses[i] = NewPopulatedCheckResponse(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		this.Target = NewPopulatedTarget(r, easy)
	}
	this.CheckName = randStringChecks(r)
	this.Version = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Version *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyChecks interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneChecks(r randyChecks) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringChecks(r randyChecks) string {
	v13 := r.Intn(100)
	tmps := make([]rune, v13)
	for i := 0; i < v13; i++ {
		tmps[i] = randUTF8RuneChecks(r)
	}
	return string(tmps)
}
func randUnrecognizedChecks(r randyChecks, maxFieldNumber int) (data []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		data = randFieldChecks(data, r, fieldNumber, wire)
	}
	return data
}
func randFieldChecks(data []byte, r randyChecks, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		data = encodeVarintPopulateChecks(data, uint64(key))
		v14 := r.Int63()
		if r.Intn(2) == 0 {
			v14 *= -1
		}
		data = encodeVarintPopulateChecks(data, uint64(v14))
	case 1:
		data = encodeVarintPopulateChecks(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		data = encodeVarintPopulateChecks(data, uint64(key))
		ll := r.Intn(100)
		data = encodeVarintPopulateChecks(data, uint64(ll))
		for j := 0; j < ll; j++ {
			data = append(data, byte(r.Intn(256)))
		}
	default:
		data = encodeVarintPopulateChecks(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return data
}
func encodeVarintPopulateChecks(data []byte, v uint64) []byte {
	for v >= 1<<7 {
		data = append(data, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	data = append(data, uint8(v))
	return data
}
