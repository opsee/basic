// Code generated by protoc-gen-gogo.
// source: types.proto
// DO NOT EDIT!

/*
	Package ecs is a generated protocol buffer package.

	It is generated from these files:
		types.proto

	It has these top-level messages:
		Attribute
		ContainerInstance
		DescribeContainerInstancesInput
		DescribeContainerInstancesOutput
		Failure
		ListTasksInput
		ListTasksOutput
		Resource
		VersionInfo
*/
package ecs

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/opsee/protobuf/opseeproto"
import _ "github.com/opsee/protobuf/opseeproto/types"

import bytes "bytes"

import github_com_graphql_go_graphql "github.com/graphql-go/graphql"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.GoGoProtoPackageIsVersion1

type Attribute struct {
	Name             *string `protobuf:"bytes,2,opt,name=Name,json=name" json:"Name,omitempty"`
	Value            *string `protobuf:"bytes,3,opt,name=Value,json=value" json:"Value,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Attribute) Reset()                    { *m = Attribute{} }
func (m *Attribute) String() string            { return proto.CompactTextString(m) }
func (*Attribute) ProtoMessage()               {}
func (*Attribute) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{0} }

func (m *Attribute) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Attribute) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

type ContainerInstance struct {
	AgentConnected       *bool        `protobuf:"varint,2,opt,name=AgentConnected,json=agentConnected" json:"AgentConnected,omitempty"`
	AgentUpdateStatus    *string      `protobuf:"bytes,3,opt,name=AgentUpdateStatus,json=agentUpdateStatus" json:"AgentUpdateStatus,omitempty"`
	Attributes           []*Attribute `protobuf:"bytes,4,rep,name=Attributes,json=attributes" json:"Attributes,omitempty"`
	ContainerInstanceArn *string      `protobuf:"bytes,5,opt,name=ContainerInstanceArn,json=containerInstanceArn" json:"ContainerInstanceArn,omitempty"`
	Ec2InstanceId        *string      `protobuf:"bytes,6,opt,name=Ec2InstanceId,json=ec2InstanceId" json:"Ec2InstanceId,omitempty"`
	PendingTasksCount    *int64       `protobuf:"zigzag64,7,opt,name=PendingTasksCount,json=pendingTasksCount" json:"PendingTasksCount,omitempty"`
	RegisteredResources  []*Resource  `protobuf:"bytes,8,rep,name=RegisteredResources,json=registeredResources" json:"RegisteredResources,omitempty"`
	RemainingResources   []*Resource  `protobuf:"bytes,9,rep,name=RemainingResources,json=remainingResources" json:"RemainingResources,omitempty"`
	RunningTasksCount    *int64       `protobuf:"zigzag64,10,opt,name=RunningTasksCount,json=runningTasksCount" json:"RunningTasksCount,omitempty"`
	Status               *string      `protobuf:"bytes,11,opt,name=Status,json=status" json:"Status,omitempty"`
	VersionInfo          *VersionInfo `protobuf:"bytes,12,opt,name=VersionInfo,json=versionInfo" json:"VersionInfo,omitempty"`
	XXX_unrecognized     []byte       `json:"-"`
}

func (m *ContainerInstance) Reset()                    { *m = ContainerInstance{} }
func (m *ContainerInstance) String() string            { return proto.CompactTextString(m) }
func (*ContainerInstance) ProtoMessage()               {}
func (*ContainerInstance) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{1} }

func (m *ContainerInstance) GetAgentConnected() bool {
	if m != nil && m.AgentConnected != nil {
		return *m.AgentConnected
	}
	return false
}

func (m *ContainerInstance) GetAgentUpdateStatus() string {
	if m != nil && m.AgentUpdateStatus != nil {
		return *m.AgentUpdateStatus
	}
	return ""
}

func (m *ContainerInstance) GetAttributes() []*Attribute {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *ContainerInstance) GetContainerInstanceArn() string {
	if m != nil && m.ContainerInstanceArn != nil {
		return *m.ContainerInstanceArn
	}
	return ""
}

func (m *ContainerInstance) GetEc2InstanceId() string {
	if m != nil && m.Ec2InstanceId != nil {
		return *m.Ec2InstanceId
	}
	return ""
}

func (m *ContainerInstance) GetPendingTasksCount() int64 {
	if m != nil && m.PendingTasksCount != nil {
		return *m.PendingTasksCount
	}
	return 0
}

func (m *ContainerInstance) GetRegisteredResources() []*Resource {
	if m != nil {
		return m.RegisteredResources
	}
	return nil
}

func (m *ContainerInstance) GetRemainingResources() []*Resource {
	if m != nil {
		return m.RemainingResources
	}
	return nil
}

func (m *ContainerInstance) GetRunningTasksCount() int64 {
	if m != nil && m.RunningTasksCount != nil {
		return *m.RunningTasksCount
	}
	return 0
}

func (m *ContainerInstance) GetStatus() string {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return ""
}

func (m *ContainerInstance) GetVersionInfo() *VersionInfo {
	if m != nil {
		return m.VersionInfo
	}
	return nil
}

type DescribeContainerInstancesInput struct {
	Cluster            *string  `protobuf:"bytes,2,opt,name=Cluster,json=cluster" json:"Cluster,omitempty"`
	ContainerInstances []string `protobuf:"bytes,3,rep,name=ContainerInstances,json=containerInstances" json:"ContainerInstances,omitempty"`
	XXX_unrecognized   []byte   `json:"-"`
}

func (m *DescribeContainerInstancesInput) Reset()         { *m = DescribeContainerInstancesInput{} }
func (m *DescribeContainerInstancesInput) String() string { return proto.CompactTextString(m) }
func (*DescribeContainerInstancesInput) ProtoMessage()    {}
func (*DescribeContainerInstancesInput) Descriptor() ([]byte, []int) {
	return fileDescriptorTypes, []int{2}
}

func (m *DescribeContainerInstancesInput) GetCluster() string {
	if m != nil && m.Cluster != nil {
		return *m.Cluster
	}
	return ""
}

func (m *DescribeContainerInstancesInput) GetContainerInstances() []string {
	if m != nil {
		return m.ContainerInstances
	}
	return nil
}

type DescribeContainerInstancesOutput struct {
	ContainerInstances []*ContainerInstance `protobuf:"bytes,2,rep,name=ContainerInstances,json=containerInstances" json:"ContainerInstances,omitempty"`
	Failures           []*Failure           `protobuf:"bytes,3,rep,name=Failures,json=failures" json:"Failures,omitempty"`
	XXX_unrecognized   []byte               `json:"-"`
}

func (m *DescribeContainerInstancesOutput) Reset()         { *m = DescribeContainerInstancesOutput{} }
func (m *DescribeContainerInstancesOutput) String() string { return proto.CompactTextString(m) }
func (*DescribeContainerInstancesOutput) ProtoMessage()    {}
func (*DescribeContainerInstancesOutput) Descriptor() ([]byte, []int) {
	return fileDescriptorTypes, []int{3}
}

func (m *DescribeContainerInstancesOutput) GetContainerInstances() []*ContainerInstance {
	if m != nil {
		return m.ContainerInstances
	}
	return nil
}

func (m *DescribeContainerInstancesOutput) GetFailures() []*Failure {
	if m != nil {
		return m.Failures
	}
	return nil
}

type Failure struct {
	Arn              *string `protobuf:"bytes,2,opt,name=Arn,json=arn" json:"Arn,omitempty"`
	Reason           *string `protobuf:"bytes,3,opt,name=Reason,json=reason" json:"Reason,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Failure) Reset()                    { *m = Failure{} }
func (m *Failure) String() string            { return proto.CompactTextString(m) }
func (*Failure) ProtoMessage()               {}
func (*Failure) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{4} }

func (m *Failure) GetArn() string {
	if m != nil && m.Arn != nil {
		return *m.Arn
	}
	return ""
}

func (m *Failure) GetReason() string {
	if m != nil && m.Reason != nil {
		return *m.Reason
	}
	return ""
}

type ListTasksInput struct {
	Cluster           *string `protobuf:"bytes,2,opt,name=Cluster,json=cluster" json:"Cluster,omitempty"`
	ContainerInstance *string `protobuf:"bytes,3,opt,name=ContainerInstance,json=containerInstance" json:"ContainerInstance,omitempty"`
	DesiredStatus     *string `protobuf:"bytes,4,opt,name=DesiredStatus,json=desiredStatus" json:"DesiredStatus,omitempty"`
	Family            *string `protobuf:"bytes,5,opt,name=Family,json=family" json:"Family,omitempty"`
	MaxResults        *int64  `protobuf:"zigzag64,6,opt,name=MaxResults,json=maxResults" json:"MaxResults,omitempty"`
	NextToken         *string `protobuf:"bytes,7,opt,name=NextToken,json=nextToken" json:"NextToken,omitempty"`
	ServiceName       *string `protobuf:"bytes,8,opt,name=ServiceName,json=serviceName" json:"ServiceName,omitempty"`
	StartedBy         *string `protobuf:"bytes,9,opt,name=StartedBy,json=startedBy" json:"StartedBy,omitempty"`
	XXX_unrecognized  []byte  `json:"-"`
}

func (m *ListTasksInput) Reset()                    { *m = ListTasksInput{} }
func (m *ListTasksInput) String() string            { return proto.CompactTextString(m) }
func (*ListTasksInput) ProtoMessage()               {}
func (*ListTasksInput) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{5} }

func (m *ListTasksInput) GetCluster() string {
	if m != nil && m.Cluster != nil {
		return *m.Cluster
	}
	return ""
}

func (m *ListTasksInput) GetContainerInstance() string {
	if m != nil && m.ContainerInstance != nil {
		return *m.ContainerInstance
	}
	return ""
}

func (m *ListTasksInput) GetDesiredStatus() string {
	if m != nil && m.DesiredStatus != nil {
		return *m.DesiredStatus
	}
	return ""
}

func (m *ListTasksInput) GetFamily() string {
	if m != nil && m.Family != nil {
		return *m.Family
	}
	return ""
}

func (m *ListTasksInput) GetMaxResults() int64 {
	if m != nil && m.MaxResults != nil {
		return *m.MaxResults
	}
	return 0
}

func (m *ListTasksInput) GetNextToken() string {
	if m != nil && m.NextToken != nil {
		return *m.NextToken
	}
	return ""
}

func (m *ListTasksInput) GetServiceName() string {
	if m != nil && m.ServiceName != nil {
		return *m.ServiceName
	}
	return ""
}

func (m *ListTasksInput) GetStartedBy() string {
	if m != nil && m.StartedBy != nil {
		return *m.StartedBy
	}
	return ""
}

type ListTasksOutput struct {
	NextToken        *string  `protobuf:"bytes,2,opt,name=NextToken,json=nextToken" json:"NextToken,omitempty"`
	TaskArns         []string `protobuf:"bytes,3,rep,name=TaskArns,json=taskArns" json:"TaskArns,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *ListTasksOutput) Reset()                    { *m = ListTasksOutput{} }
func (m *ListTasksOutput) String() string            { return proto.CompactTextString(m) }
func (*ListTasksOutput) ProtoMessage()               {}
func (*ListTasksOutput) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{6} }

func (m *ListTasksOutput) GetNextToken() string {
	if m != nil && m.NextToken != nil {
		return *m.NextToken
	}
	return ""
}

func (m *ListTasksOutput) GetTaskArns() []string {
	if m != nil {
		return m.TaskArns
	}
	return nil
}

type Resource struct {
	DoubleValue      *float64 `protobuf:"fixed64,2,opt,name=DoubleValue,json=doubleValue" json:"DoubleValue,omitempty"`
	IntegerValue     *int64   `protobuf:"zigzag64,3,opt,name=IntegerValue,json=integerValue" json:"IntegerValue,omitempty"`
	LongValue        *int64   `protobuf:"zigzag64,4,opt,name=LongValue,json=longValue" json:"LongValue,omitempty"`
	Name             *string  `protobuf:"bytes,5,opt,name=Name,json=name" json:"Name,omitempty"`
	StringSetValue   []string `protobuf:"bytes,6,rep,name=StringSetValue,json=stringSetValue" json:"StringSetValue,omitempty"`
	Type             *string  `protobuf:"bytes,7,opt,name=Type,json=type" json:"Type,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *Resource) Reset()                    { *m = Resource{} }
func (m *Resource) String() string            { return proto.CompactTextString(m) }
func (*Resource) ProtoMessage()               {}
func (*Resource) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{7} }

func (m *Resource) GetDoubleValue() float64 {
	if m != nil && m.DoubleValue != nil {
		return *m.DoubleValue
	}
	return 0
}

func (m *Resource) GetIntegerValue() int64 {
	if m != nil && m.IntegerValue != nil {
		return *m.IntegerValue
	}
	return 0
}

func (m *Resource) GetLongValue() int64 {
	if m != nil && m.LongValue != nil {
		return *m.LongValue
	}
	return 0
}

func (m *Resource) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Resource) GetStringSetValue() []string {
	if m != nil {
		return m.StringSetValue
	}
	return nil
}

func (m *Resource) GetType() string {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return ""
}

type VersionInfo struct {
	AgentHash        *string `protobuf:"bytes,2,opt,name=AgentHash,json=agentHash" json:"AgentHash,omitempty"`
	AgentVersion     *string `protobuf:"bytes,3,opt,name=AgentVersion,json=agentVersion" json:"AgentVersion,omitempty"`
	DockerVersion    *string `protobuf:"bytes,4,opt,name=DockerVersion,json=dockerVersion" json:"DockerVersion,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *VersionInfo) Reset()                    { *m = VersionInfo{} }
func (m *VersionInfo) String() string            { return proto.CompactTextString(m) }
func (*VersionInfo) ProtoMessage()               {}
func (*VersionInfo) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{8} }

func (m *VersionInfo) GetAgentHash() string {
	if m != nil && m.AgentHash != nil {
		return *m.AgentHash
	}
	return ""
}

func (m *VersionInfo) GetAgentVersion() string {
	if m != nil && m.AgentVersion != nil {
		return *m.AgentVersion
	}
	return ""
}

func (m *VersionInfo) GetDockerVersion() string {
	if m != nil && m.DockerVersion != nil {
		return *m.DockerVersion
	}
	return ""
}

func init() {
	proto.RegisterType((*Attribute)(nil), "opsee.aws.ecs.Attribute")
	proto.RegisterType((*ContainerInstance)(nil), "opsee.aws.ecs.ContainerInstance")
	proto.RegisterType((*DescribeContainerInstancesInput)(nil), "opsee.aws.ecs.DescribeContainerInstancesInput")
	proto.RegisterType((*DescribeContainerInstancesOutput)(nil), "opsee.aws.ecs.DescribeContainerInstancesOutput")
	proto.RegisterType((*Failure)(nil), "opsee.aws.ecs.Failure")
	proto.RegisterType((*ListTasksInput)(nil), "opsee.aws.ecs.ListTasksInput")
	proto.RegisterType((*ListTasksOutput)(nil), "opsee.aws.ecs.ListTasksOutput")
	proto.RegisterType((*Resource)(nil), "opsee.aws.ecs.Resource")
	proto.RegisterType((*VersionInfo)(nil), "opsee.aws.ecs.VersionInfo")
}
func (this *Attribute) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Attribute)
	if !ok {
		that2, ok := that.(Attribute)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Name != nil && that1.Name != nil {
		if *this.Name != *that1.Name {
			return false
		}
	} else if this.Name != nil {
		return false
	} else if that1.Name != nil {
		return false
	}
	if this.Value != nil && that1.Value != nil {
		if *this.Value != *that1.Value {
			return false
		}
	} else if this.Value != nil {
		return false
	} else if that1.Value != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ContainerInstance) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ContainerInstance)
	if !ok {
		that2, ok := that.(ContainerInstance)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.AgentConnected != nil && that1.AgentConnected != nil {
		if *this.AgentConnected != *that1.AgentConnected {
			return false
		}
	} else if this.AgentConnected != nil {
		return false
	} else if that1.AgentConnected != nil {
		return false
	}
	if this.AgentUpdateStatus != nil && that1.AgentUpdateStatus != nil {
		if *this.AgentUpdateStatus != *that1.AgentUpdateStatus {
			return false
		}
	} else if this.AgentUpdateStatus != nil {
		return false
	} else if that1.AgentUpdateStatus != nil {
		return false
	}
	if len(this.Attributes) != len(that1.Attributes) {
		return false
	}
	for i := range this.Attributes {
		if !this.Attributes[i].Equal(that1.Attributes[i]) {
			return false
		}
	}
	if this.ContainerInstanceArn != nil && that1.ContainerInstanceArn != nil {
		if *this.ContainerInstanceArn != *that1.ContainerInstanceArn {
			return false
		}
	} else if this.ContainerInstanceArn != nil {
		return false
	} else if that1.ContainerInstanceArn != nil {
		return false
	}
	if this.Ec2InstanceId != nil && that1.Ec2InstanceId != nil {
		if *this.Ec2InstanceId != *that1.Ec2InstanceId {
			return false
		}
	} else if this.Ec2InstanceId != nil {
		return false
	} else if that1.Ec2InstanceId != nil {
		return false
	}
	if this.PendingTasksCount != nil && that1.PendingTasksCount != nil {
		if *this.PendingTasksCount != *that1.PendingTasksCount {
			return false
		}
	} else if this.PendingTasksCount != nil {
		return false
	} else if that1.PendingTasksCount != nil {
		return false
	}
	if len(this.RegisteredResources) != len(that1.RegisteredResources) {
		return false
	}
	for i := range this.RegisteredResources {
		if !this.RegisteredResources[i].Equal(that1.RegisteredResources[i]) {
			return false
		}
	}
	if len(this.RemainingResources) != len(that1.RemainingResources) {
		return false
	}
	for i := range this.RemainingResources {
		if !this.RemainingResources[i].Equal(that1.RemainingResources[i]) {
			return false
		}
	}
	if this.RunningTasksCount != nil && that1.RunningTasksCount != nil {
		if *this.RunningTasksCount != *that1.RunningTasksCount {
			return false
		}
	} else if this.RunningTasksCount != nil {
		return false
	} else if that1.RunningTasksCount != nil {
		return false
	}
	if this.Status != nil && that1.Status != nil {
		if *this.Status != *that1.Status {
			return false
		}
	} else if this.Status != nil {
		return false
	} else if that1.Status != nil {
		return false
	}
	if !this.VersionInfo.Equal(that1.VersionInfo) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *DescribeContainerInstancesInput) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DescribeContainerInstancesInput)
	if !ok {
		that2, ok := that.(DescribeContainerInstancesInput)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Cluster != nil && that1.Cluster != nil {
		if *this.Cluster != *that1.Cluster {
			return false
		}
	} else if this.Cluster != nil {
		return false
	} else if that1.Cluster != nil {
		return false
	}
	if len(this.ContainerInstances) != len(that1.ContainerInstances) {
		return false
	}
	for i := range this.ContainerInstances {
		if this.ContainerInstances[i] != that1.ContainerInstances[i] {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *DescribeContainerInstancesOutput) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DescribeContainerInstancesOutput)
	if !ok {
		that2, ok := that.(DescribeContainerInstancesOutput)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.ContainerInstances) != len(that1.ContainerInstances) {
		return false
	}
	for i := range this.ContainerInstances {
		if !this.ContainerInstances[i].Equal(that1.ContainerInstances[i]) {
			return false
		}
	}
	if len(this.Failures) != len(that1.Failures) {
		return false
	}
	for i := range this.Failures {
		if !this.Failures[i].Equal(that1.Failures[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Failure) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Failure)
	if !ok {
		that2, ok := that.(Failure)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Arn != nil && that1.Arn != nil {
		if *this.Arn != *that1.Arn {
			return false
		}
	} else if this.Arn != nil {
		return false
	} else if that1.Arn != nil {
		return false
	}
	if this.Reason != nil && that1.Reason != nil {
		if *this.Reason != *that1.Reason {
			return false
		}
	} else if this.Reason != nil {
		return false
	} else if that1.Reason != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ListTasksInput) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ListTasksInput)
	if !ok {
		that2, ok := that.(ListTasksInput)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Cluster != nil && that1.Cluster != nil {
		if *this.Cluster != *that1.Cluster {
			return false
		}
	} else if this.Cluster != nil {
		return false
	} else if that1.Cluster != nil {
		return false
	}
	if this.ContainerInstance != nil && that1.ContainerInstance != nil {
		if *this.ContainerInstance != *that1.ContainerInstance {
			return false
		}
	} else if this.ContainerInstance != nil {
		return false
	} else if that1.ContainerInstance != nil {
		return false
	}
	if this.DesiredStatus != nil && that1.DesiredStatus != nil {
		if *this.DesiredStatus != *that1.DesiredStatus {
			return false
		}
	} else if this.DesiredStatus != nil {
		return false
	} else if that1.DesiredStatus != nil {
		return false
	}
	if this.Family != nil && that1.Family != nil {
		if *this.Family != *that1.Family {
			return false
		}
	} else if this.Family != nil {
		return false
	} else if that1.Family != nil {
		return false
	}
	if this.MaxResults != nil && that1.MaxResults != nil {
		if *this.MaxResults != *that1.MaxResults {
			return false
		}
	} else if this.MaxResults != nil {
		return false
	} else if that1.MaxResults != nil {
		return false
	}
	if this.NextToken != nil && that1.NextToken != nil {
		if *this.NextToken != *that1.NextToken {
			return false
		}
	} else if this.NextToken != nil {
		return false
	} else if that1.NextToken != nil {
		return false
	}
	if this.ServiceName != nil && that1.ServiceName != nil {
		if *this.ServiceName != *that1.ServiceName {
			return false
		}
	} else if this.ServiceName != nil {
		return false
	} else if that1.ServiceName != nil {
		return false
	}
	if this.StartedBy != nil && that1.StartedBy != nil {
		if *this.StartedBy != *that1.StartedBy {
			return false
		}
	} else if this.StartedBy != nil {
		return false
	} else if that1.StartedBy != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ListTasksOutput) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ListTasksOutput)
	if !ok {
		that2, ok := that.(ListTasksOutput)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.NextToken != nil && that1.NextToken != nil {
		if *this.NextToken != *that1.NextToken {
			return false
		}
	} else if this.NextToken != nil {
		return false
	} else if that1.NextToken != nil {
		return false
	}
	if len(this.TaskArns) != len(that1.TaskArns) {
		return false
	}
	for i := range this.TaskArns {
		if this.TaskArns[i] != that1.TaskArns[i] {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Resource) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Resource)
	if !ok {
		that2, ok := that.(Resource)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.DoubleValue != nil && that1.DoubleValue != nil {
		if *this.DoubleValue != *that1.DoubleValue {
			return false
		}
	} else if this.DoubleValue != nil {
		return false
	} else if that1.DoubleValue != nil {
		return false
	}
	if this.IntegerValue != nil && that1.IntegerValue != nil {
		if *this.IntegerValue != *that1.IntegerValue {
			return false
		}
	} else if this.IntegerValue != nil {
		return false
	} else if that1.IntegerValue != nil {
		return false
	}
	if this.LongValue != nil && that1.LongValue != nil {
		if *this.LongValue != *that1.LongValue {
			return false
		}
	} else if this.LongValue != nil {
		return false
	} else if that1.LongValue != nil {
		return false
	}
	if this.Name != nil && that1.Name != nil {
		if *this.Name != *that1.Name {
			return false
		}
	} else if this.Name != nil {
		return false
	} else if that1.Name != nil {
		return false
	}
	if len(this.StringSetValue) != len(that1.StringSetValue) {
		return false
	}
	for i := range this.StringSetValue {
		if this.StringSetValue[i] != that1.StringSetValue[i] {
			return false
		}
	}
	if this.Type != nil && that1.Type != nil {
		if *this.Type != *that1.Type {
			return false
		}
	} else if this.Type != nil {
		return false
	} else if that1.Type != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *VersionInfo) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*VersionInfo)
	if !ok {
		that2, ok := that.(VersionInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.AgentHash != nil && that1.AgentHash != nil {
		if *this.AgentHash != *that1.AgentHash {
			return false
		}
	} else if this.AgentHash != nil {
		return false
	} else if that1.AgentHash != nil {
		return false
	}
	if this.AgentVersion != nil && that1.AgentVersion != nil {
		if *this.AgentVersion != *that1.AgentVersion {
			return false
		}
	} else if this.AgentVersion != nil {
		return false
	} else if that1.AgentVersion != nil {
		return false
	}
	if this.DockerVersion != nil && that1.DockerVersion != nil {
		if *this.DockerVersion != *that1.DockerVersion {
			return false
		}
	} else if this.DockerVersion != nil {
		return false
	} else if that1.DockerVersion != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}

type AttributeGetter interface {
	GetAttribute() *Attribute
}

var GraphQLAttributeType *github_com_graphql_go_graphql.Object

type ContainerInstanceGetter interface {
	GetContainerInstance() *ContainerInstance
}

var GraphQLContainerInstanceType *github_com_graphql_go_graphql.Object

type DescribeContainerInstancesInputGetter interface {
	GetDescribeContainerInstancesInput() *DescribeContainerInstancesInput
}

var GraphQLDescribeContainerInstancesInputType *github_com_graphql_go_graphql.Object

type DescribeContainerInstancesOutputGetter interface {
	GetDescribeContainerInstancesOutput() *DescribeContainerInstancesOutput
}

var GraphQLDescribeContainerInstancesOutputType *github_com_graphql_go_graphql.Object

type FailureGetter interface {
	GetFailure() *Failure
}

var GraphQLFailureType *github_com_graphql_go_graphql.Object

type ListTasksInputGetter interface {
	GetListTasksInput() *ListTasksInput
}

var GraphQLListTasksInputType *github_com_graphql_go_graphql.Object

type ListTasksOutputGetter interface {
	GetListTasksOutput() *ListTasksOutput
}

var GraphQLListTasksOutputType *github_com_graphql_go_graphql.Object

type ResourceGetter interface {
	GetResource() *Resource
}

var GraphQLResourceType *github_com_graphql_go_graphql.Object

type VersionInfoGetter interface {
	GetVersionInfo() *VersionInfo
}

var GraphQLVersionInfoType *github_com_graphql_go_graphql.Object

func init() {
	GraphQLAttributeType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "ecsAttribute",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"Name": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Attribute)
						if ok {
							if obj.Name == nil {
								return nil, nil
							}
							return obj.GetName(), nil
						}
						inter, ok := p.Source.(AttributeGetter)
						if ok {
							face := inter.GetAttribute()
							if face == nil {
								return nil, nil
							}
							if face.Name == nil {
								return nil, nil
							}
							return face.GetName(), nil
						}
						return nil, fmt.Errorf("field Name not resolved")
					},
				},
				"Value": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Attribute)
						if ok {
							if obj.Value == nil {
								return nil, nil
							}
							return obj.GetValue(), nil
						}
						inter, ok := p.Source.(AttributeGetter)
						if ok {
							face := inter.GetAttribute()
							if face == nil {
								return nil, nil
							}
							if face.Value == nil {
								return nil, nil
							}
							return face.GetValue(), nil
						}
						return nil, fmt.Errorf("field Value not resolved")
					},
				},
			}
		}),
	})
	GraphQLContainerInstanceType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "ecsContainerInstance",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"AgentConnected": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Boolean,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*ContainerInstance)
						if ok {
							if obj.AgentConnected == nil {
								return nil, nil
							}
							return obj.GetAgentConnected(), nil
						}
						inter, ok := p.Source.(ContainerInstanceGetter)
						if ok {
							face := inter.GetContainerInstance()
							if face == nil {
								return nil, nil
							}
							if face.AgentConnected == nil {
								return nil, nil
							}
							return face.GetAgentConnected(), nil
						}
						return nil, fmt.Errorf("field AgentConnected not resolved")
					},
				},
				"AgentUpdateStatus": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*ContainerInstance)
						if ok {
							if obj.AgentUpdateStatus == nil {
								return nil, nil
							}
							return obj.GetAgentUpdateStatus(), nil
						}
						inter, ok := p.Source.(ContainerInstanceGetter)
						if ok {
							face := inter.GetContainerInstance()
							if face == nil {
								return nil, nil
							}
							if face.AgentUpdateStatus == nil {
								return nil, nil
							}
							return face.GetAgentUpdateStatus(), nil
						}
						return nil, fmt.Errorf("field AgentUpdateStatus not resolved")
					},
				},
				"Attributes": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(GraphQLAttributeType),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*ContainerInstance)
						if ok {
							return obj.Attributes, nil
						}
						inter, ok := p.Source.(ContainerInstanceGetter)
						if ok {
							face := inter.GetContainerInstance()
							if face == nil {
								return nil, nil
							}
							return face.Attributes, nil
						}
						return nil, fmt.Errorf("field Attributes not resolved")
					},
				},
				"ContainerInstanceArn": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*ContainerInstance)
						if ok {
							if obj.ContainerInstanceArn == nil {
								return nil, nil
							}
							return obj.GetContainerInstanceArn(), nil
						}
						inter, ok := p.Source.(ContainerInstanceGetter)
						if ok {
							face := inter.GetContainerInstance()
							if face == nil {
								return nil, nil
							}
							if face.ContainerInstanceArn == nil {
								return nil, nil
							}
							return face.GetContainerInstanceArn(), nil
						}
						return nil, fmt.Errorf("field ContainerInstanceArn not resolved")
					},
				},
				"Ec2InstanceId": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*ContainerInstance)
						if ok {
							if obj.Ec2InstanceId == nil {
								return nil, nil
							}
							return obj.GetEc2InstanceId(), nil
						}
						inter, ok := p.Source.(ContainerInstanceGetter)
						if ok {
							face := inter.GetContainerInstance()
							if face == nil {
								return nil, nil
							}
							if face.Ec2InstanceId == nil {
								return nil, nil
							}
							return face.GetEc2InstanceId(), nil
						}
						return nil, fmt.Errorf("field Ec2InstanceId not resolved")
					},
				},
				"PendingTasksCount": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*ContainerInstance)
						if ok {
							if obj.PendingTasksCount == nil {
								return nil, nil
							}
							return obj.GetPendingTasksCount(), nil
						}
						inter, ok := p.Source.(ContainerInstanceGetter)
						if ok {
							face := inter.GetContainerInstance()
							if face == nil {
								return nil, nil
							}
							if face.PendingTasksCount == nil {
								return nil, nil
							}
							return face.GetPendingTasksCount(), nil
						}
						return nil, fmt.Errorf("field PendingTasksCount not resolved")
					},
				},
				"RegisteredResources": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(GraphQLResourceType),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*ContainerInstance)
						if ok {
							return obj.RegisteredResources, nil
						}
						inter, ok := p.Source.(ContainerInstanceGetter)
						if ok {
							face := inter.GetContainerInstance()
							if face == nil {
								return nil, nil
							}
							return face.RegisteredResources, nil
						}
						return nil, fmt.Errorf("field RegisteredResources not resolved")
					},
				},
				"RemainingResources": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(GraphQLResourceType),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*ContainerInstance)
						if ok {
							return obj.RemainingResources, nil
						}
						inter, ok := p.Source.(ContainerInstanceGetter)
						if ok {
							face := inter.GetContainerInstance()
							if face == nil {
								return nil, nil
							}
							return face.RemainingResources, nil
						}
						return nil, fmt.Errorf("field RemainingResources not resolved")
					},
				},
				"RunningTasksCount": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*ContainerInstance)
						if ok {
							if obj.RunningTasksCount == nil {
								return nil, nil
							}
							return obj.GetRunningTasksCount(), nil
						}
						inter, ok := p.Source.(ContainerInstanceGetter)
						if ok {
							face := inter.GetContainerInstance()
							if face == nil {
								return nil, nil
							}
							if face.RunningTasksCount == nil {
								return nil, nil
							}
							return face.GetRunningTasksCount(), nil
						}
						return nil, fmt.Errorf("field RunningTasksCount not resolved")
					},
				},
				"Status": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*ContainerInstance)
						if ok {
							if obj.Status == nil {
								return nil, nil
							}
							return obj.GetStatus(), nil
						}
						inter, ok := p.Source.(ContainerInstanceGetter)
						if ok {
							face := inter.GetContainerInstance()
							if face == nil {
								return nil, nil
							}
							if face.Status == nil {
								return nil, nil
							}
							return face.GetStatus(), nil
						}
						return nil, fmt.Errorf("field Status not resolved")
					},
				},
				"VersionInfo": &github_com_graphql_go_graphql.Field{
					Type:        GraphQLVersionInfoType,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*ContainerInstance)
						if ok {
							if obj.VersionInfo == nil {
								return nil, nil
							}
							return obj.GetVersionInfo(), nil
						}
						inter, ok := p.Source.(ContainerInstanceGetter)
						if ok {
							face := inter.GetContainerInstance()
							if face == nil {
								return nil, nil
							}
							if face.VersionInfo == nil {
								return nil, nil
							}
							return face.GetVersionInfo(), nil
						}
						return nil, fmt.Errorf("field VersionInfo not resolved")
					},
				},
			}
		}),
	})
	GraphQLDescribeContainerInstancesInputType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "ecsDescribeContainerInstancesInput",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"Cluster": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*DescribeContainerInstancesInput)
						if ok {
							if obj.Cluster == nil {
								return nil, nil
							}
							return obj.GetCluster(), nil
						}
						inter, ok := p.Source.(DescribeContainerInstancesInputGetter)
						if ok {
							face := inter.GetDescribeContainerInstancesInput()
							if face == nil {
								return nil, nil
							}
							if face.Cluster == nil {
								return nil, nil
							}
							return face.GetCluster(), nil
						}
						return nil, fmt.Errorf("field Cluster not resolved")
					},
				},
				"ContainerInstances": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(github_com_graphql_go_graphql.String),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*DescribeContainerInstancesInput)
						if ok {
							return obj.ContainerInstances, nil
						}
						inter, ok := p.Source.(DescribeContainerInstancesInputGetter)
						if ok {
							face := inter.GetDescribeContainerInstancesInput()
							if face == nil {
								return nil, nil
							}
							return face.ContainerInstances, nil
						}
						return nil, fmt.Errorf("field ContainerInstances not resolved")
					},
				},
			}
		}),
	})
	GraphQLDescribeContainerInstancesOutputType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "ecsDescribeContainerInstancesOutput",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"ContainerInstances": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(GraphQLContainerInstanceType),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*DescribeContainerInstancesOutput)
						if ok {
							return obj.ContainerInstances, nil
						}
						inter, ok := p.Source.(DescribeContainerInstancesOutputGetter)
						if ok {
							face := inter.GetDescribeContainerInstancesOutput()
							if face == nil {
								return nil, nil
							}
							return face.ContainerInstances, nil
						}
						return nil, fmt.Errorf("field ContainerInstances not resolved")
					},
				},
				"Failures": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(GraphQLFailureType),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*DescribeContainerInstancesOutput)
						if ok {
							return obj.Failures, nil
						}
						inter, ok := p.Source.(DescribeContainerInstancesOutputGetter)
						if ok {
							face := inter.GetDescribeContainerInstancesOutput()
							if face == nil {
								return nil, nil
							}
							return face.Failures, nil
						}
						return nil, fmt.Errorf("field Failures not resolved")
					},
				},
			}
		}),
	})
	GraphQLFailureType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "ecsFailure",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"Arn": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Failure)
						if ok {
							if obj.Arn == nil {
								return nil, nil
							}
							return obj.GetArn(), nil
						}
						inter, ok := p.Source.(FailureGetter)
						if ok {
							face := inter.GetFailure()
							if face == nil {
								return nil, nil
							}
							if face.Arn == nil {
								return nil, nil
							}
							return face.GetArn(), nil
						}
						return nil, fmt.Errorf("field Arn not resolved")
					},
				},
				"Reason": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Failure)
						if ok {
							if obj.Reason == nil {
								return nil, nil
							}
							return obj.GetReason(), nil
						}
						inter, ok := p.Source.(FailureGetter)
						if ok {
							face := inter.GetFailure()
							if face == nil {
								return nil, nil
							}
							if face.Reason == nil {
								return nil, nil
							}
							return face.GetReason(), nil
						}
						return nil, fmt.Errorf("field Reason not resolved")
					},
				},
			}
		}),
	})
	GraphQLListTasksInputType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "ecsListTasksInput",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"Cluster": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*ListTasksInput)
						if ok {
							if obj.Cluster == nil {
								return nil, nil
							}
							return obj.GetCluster(), nil
						}
						inter, ok := p.Source.(ListTasksInputGetter)
						if ok {
							face := inter.GetListTasksInput()
							if face == nil {
								return nil, nil
							}
							if face.Cluster == nil {
								return nil, nil
							}
							return face.GetCluster(), nil
						}
						return nil, fmt.Errorf("field Cluster not resolved")
					},
				},
				"ContainerInstance": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*ListTasksInput)
						if ok {
							if obj.ContainerInstance == nil {
								return nil, nil
							}
							return obj.GetContainerInstance(), nil
						}
						inter, ok := p.Source.(ListTasksInputGetter)
						if ok {
							face := inter.GetListTasksInput()
							if face == nil {
								return nil, nil
							}
							if face.ContainerInstance == nil {
								return nil, nil
							}
							return face.GetContainerInstance(), nil
						}
						return nil, fmt.Errorf("field ContainerInstance not resolved")
					},
				},
				"DesiredStatus": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*ListTasksInput)
						if ok {
							if obj.DesiredStatus == nil {
								return nil, nil
							}
							return obj.GetDesiredStatus(), nil
						}
						inter, ok := p.Source.(ListTasksInputGetter)
						if ok {
							face := inter.GetListTasksInput()
							if face == nil {
								return nil, nil
							}
							if face.DesiredStatus == nil {
								return nil, nil
							}
							return face.GetDesiredStatus(), nil
						}
						return nil, fmt.Errorf("field DesiredStatus not resolved")
					},
				},
				"Family": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*ListTasksInput)
						if ok {
							if obj.Family == nil {
								return nil, nil
							}
							return obj.GetFamily(), nil
						}
						inter, ok := p.Source.(ListTasksInputGetter)
						if ok {
							face := inter.GetListTasksInput()
							if face == nil {
								return nil, nil
							}
							if face.Family == nil {
								return nil, nil
							}
							return face.GetFamily(), nil
						}
						return nil, fmt.Errorf("field Family not resolved")
					},
				},
				"MaxResults": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*ListTasksInput)
						if ok {
							if obj.MaxResults == nil {
								return nil, nil
							}
							return obj.GetMaxResults(), nil
						}
						inter, ok := p.Source.(ListTasksInputGetter)
						if ok {
							face := inter.GetListTasksInput()
							if face == nil {
								return nil, nil
							}
							if face.MaxResults == nil {
								return nil, nil
							}
							return face.GetMaxResults(), nil
						}
						return nil, fmt.Errorf("field MaxResults not resolved")
					},
				},
				"NextToken": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*ListTasksInput)
						if ok {
							if obj.NextToken == nil {
								return nil, nil
							}
							return obj.GetNextToken(), nil
						}
						inter, ok := p.Source.(ListTasksInputGetter)
						if ok {
							face := inter.GetListTasksInput()
							if face == nil {
								return nil, nil
							}
							if face.NextToken == nil {
								return nil, nil
							}
							return face.GetNextToken(), nil
						}
						return nil, fmt.Errorf("field NextToken not resolved")
					},
				},
				"ServiceName": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*ListTasksInput)
						if ok {
							if obj.ServiceName == nil {
								return nil, nil
							}
							return obj.GetServiceName(), nil
						}
						inter, ok := p.Source.(ListTasksInputGetter)
						if ok {
							face := inter.GetListTasksInput()
							if face == nil {
								return nil, nil
							}
							if face.ServiceName == nil {
								return nil, nil
							}
							return face.GetServiceName(), nil
						}
						return nil, fmt.Errorf("field ServiceName not resolved")
					},
				},
				"StartedBy": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*ListTasksInput)
						if ok {
							if obj.StartedBy == nil {
								return nil, nil
							}
							return obj.GetStartedBy(), nil
						}
						inter, ok := p.Source.(ListTasksInputGetter)
						if ok {
							face := inter.GetListTasksInput()
							if face == nil {
								return nil, nil
							}
							if face.StartedBy == nil {
								return nil, nil
							}
							return face.GetStartedBy(), nil
						}
						return nil, fmt.Errorf("field StartedBy not resolved")
					},
				},
			}
		}),
	})
	GraphQLListTasksOutputType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "ecsListTasksOutput",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"NextToken": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*ListTasksOutput)
						if ok {
							if obj.NextToken == nil {
								return nil, nil
							}
							return obj.GetNextToken(), nil
						}
						inter, ok := p.Source.(ListTasksOutputGetter)
						if ok {
							face := inter.GetListTasksOutput()
							if face == nil {
								return nil, nil
							}
							if face.NextToken == nil {
								return nil, nil
							}
							return face.GetNextToken(), nil
						}
						return nil, fmt.Errorf("field NextToken not resolved")
					},
				},
				"TaskArns": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(github_com_graphql_go_graphql.String),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*ListTasksOutput)
						if ok {
							return obj.TaskArns, nil
						}
						inter, ok := p.Source.(ListTasksOutputGetter)
						if ok {
							face := inter.GetListTasksOutput()
							if face == nil {
								return nil, nil
							}
							return face.TaskArns, nil
						}
						return nil, fmt.Errorf("field TaskArns not resolved")
					},
				},
			}
		}),
	})
	GraphQLResourceType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "ecsResource",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"DoubleValue": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Float,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Resource)
						if ok {
							if obj.DoubleValue == nil {
								return nil, nil
							}
							return obj.GetDoubleValue(), nil
						}
						inter, ok := p.Source.(ResourceGetter)
						if ok {
							face := inter.GetResource()
							if face == nil {
								return nil, nil
							}
							if face.DoubleValue == nil {
								return nil, nil
							}
							return face.GetDoubleValue(), nil
						}
						return nil, fmt.Errorf("field DoubleValue not resolved")
					},
				},
				"IntegerValue": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Resource)
						if ok {
							if obj.IntegerValue == nil {
								return nil, nil
							}
							return obj.GetIntegerValue(), nil
						}
						inter, ok := p.Source.(ResourceGetter)
						if ok {
							face := inter.GetResource()
							if face == nil {
								return nil, nil
							}
							if face.IntegerValue == nil {
								return nil, nil
							}
							return face.GetIntegerValue(), nil
						}
						return nil, fmt.Errorf("field IntegerValue not resolved")
					},
				},
				"LongValue": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Resource)
						if ok {
							if obj.LongValue == nil {
								return nil, nil
							}
							return obj.GetLongValue(), nil
						}
						inter, ok := p.Source.(ResourceGetter)
						if ok {
							face := inter.GetResource()
							if face == nil {
								return nil, nil
							}
							if face.LongValue == nil {
								return nil, nil
							}
							return face.GetLongValue(), nil
						}
						return nil, fmt.Errorf("field LongValue not resolved")
					},
				},
				"Name": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Resource)
						if ok {
							if obj.Name == nil {
								return nil, nil
							}
							return obj.GetName(), nil
						}
						inter, ok := p.Source.(ResourceGetter)
						if ok {
							face := inter.GetResource()
							if face == nil {
								return nil, nil
							}
							if face.Name == nil {
								return nil, nil
							}
							return face.GetName(), nil
						}
						return nil, fmt.Errorf("field Name not resolved")
					},
				},
				"StringSetValue": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(github_com_graphql_go_graphql.String),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Resource)
						if ok {
							return obj.StringSetValue, nil
						}
						inter, ok := p.Source.(ResourceGetter)
						if ok {
							face := inter.GetResource()
							if face == nil {
								return nil, nil
							}
							return face.StringSetValue, nil
						}
						return nil, fmt.Errorf("field StringSetValue not resolved")
					},
				},
				"Type": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Resource)
						if ok {
							if obj.Type == nil {
								return nil, nil
							}
							return obj.GetType(), nil
						}
						inter, ok := p.Source.(ResourceGetter)
						if ok {
							face := inter.GetResource()
							if face == nil {
								return nil, nil
							}
							if face.Type == nil {
								return nil, nil
							}
							return face.GetType(), nil
						}
						return nil, fmt.Errorf("field Type not resolved")
					},
				},
			}
		}),
	})
	GraphQLVersionInfoType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "ecsVersionInfo",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"AgentHash": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*VersionInfo)
						if ok {
							if obj.AgentHash == nil {
								return nil, nil
							}
							return obj.GetAgentHash(), nil
						}
						inter, ok := p.Source.(VersionInfoGetter)
						if ok {
							face := inter.GetVersionInfo()
							if face == nil {
								return nil, nil
							}
							if face.AgentHash == nil {
								return nil, nil
							}
							return face.GetAgentHash(), nil
						}
						return nil, fmt.Errorf("field AgentHash not resolved")
					},
				},
				"AgentVersion": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*VersionInfo)
						if ok {
							if obj.AgentVersion == nil {
								return nil, nil
							}
							return obj.GetAgentVersion(), nil
						}
						inter, ok := p.Source.(VersionInfoGetter)
						if ok {
							face := inter.GetVersionInfo()
							if face == nil {
								return nil, nil
							}
							if face.AgentVersion == nil {
								return nil, nil
							}
							return face.GetAgentVersion(), nil
						}
						return nil, fmt.Errorf("field AgentVersion not resolved")
					},
				},
				"DockerVersion": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*VersionInfo)
						if ok {
							if obj.DockerVersion == nil {
								return nil, nil
							}
							return obj.GetDockerVersion(), nil
						}
						inter, ok := p.Source.(VersionInfoGetter)
						if ok {
							face := inter.GetVersionInfo()
							if face == nil {
								return nil, nil
							}
							if face.DockerVersion == nil {
								return nil, nil
							}
							return face.GetDockerVersion(), nil
						}
						return nil, fmt.Errorf("field DockerVersion not resolved")
					},
				},
			}
		}),
	})
}
func (m *Attribute) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Attribute) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Name != nil {
		data[i] = 0x12
		i++
		i = encodeVarintTypes(data, i, uint64(len(*m.Name)))
		i += copy(data[i:], *m.Name)
	}
	if m.Value != nil {
		data[i] = 0x1a
		i++
		i = encodeVarintTypes(data, i, uint64(len(*m.Value)))
		i += copy(data[i:], *m.Value)
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ContainerInstance) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ContainerInstance) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AgentConnected != nil {
		data[i] = 0x10
		i++
		if *m.AgentConnected {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if m.AgentUpdateStatus != nil {
		data[i] = 0x1a
		i++
		i = encodeVarintTypes(data, i, uint64(len(*m.AgentUpdateStatus)))
		i += copy(data[i:], *m.AgentUpdateStatus)
	}
	if len(m.Attributes) > 0 {
		for _, msg := range m.Attributes {
			data[i] = 0x22
			i++
			i = encodeVarintTypes(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.ContainerInstanceArn != nil {
		data[i] = 0x2a
		i++
		i = encodeVarintTypes(data, i, uint64(len(*m.ContainerInstanceArn)))
		i += copy(data[i:], *m.ContainerInstanceArn)
	}
	if m.Ec2InstanceId != nil {
		data[i] = 0x32
		i++
		i = encodeVarintTypes(data, i, uint64(len(*m.Ec2InstanceId)))
		i += copy(data[i:], *m.Ec2InstanceId)
	}
	if m.PendingTasksCount != nil {
		data[i] = 0x38
		i++
		i = encodeVarintTypes(data, i, uint64((uint64(*m.PendingTasksCount)<<1)^uint64((*m.PendingTasksCount>>63))))
	}
	if len(m.RegisteredResources) > 0 {
		for _, msg := range m.RegisteredResources {
			data[i] = 0x42
			i++
			i = encodeVarintTypes(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.RemainingResources) > 0 {
		for _, msg := range m.RemainingResources {
			data[i] = 0x4a
			i++
			i = encodeVarintTypes(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.RunningTasksCount != nil {
		data[i] = 0x50
		i++
		i = encodeVarintTypes(data, i, uint64((uint64(*m.RunningTasksCount)<<1)^uint64((*m.RunningTasksCount>>63))))
	}
	if m.Status != nil {
		data[i] = 0x5a
		i++
		i = encodeVarintTypes(data, i, uint64(len(*m.Status)))
		i += copy(data[i:], *m.Status)
	}
	if m.VersionInfo != nil {
		data[i] = 0x62
		i++
		i = encodeVarintTypes(data, i, uint64(m.VersionInfo.Size()))
		n1, err := m.VersionInfo.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DescribeContainerInstancesInput) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *DescribeContainerInstancesInput) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Cluster != nil {
		data[i] = 0x12
		i++
		i = encodeVarintTypes(data, i, uint64(len(*m.Cluster)))
		i += copy(data[i:], *m.Cluster)
	}
	if len(m.ContainerInstances) > 0 {
		for _, s := range m.ContainerInstances {
			data[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				data[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			data[i] = uint8(l)
			i++
			i += copy(data[i:], s)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DescribeContainerInstancesOutput) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *DescribeContainerInstancesOutput) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ContainerInstances) > 0 {
		for _, msg := range m.ContainerInstances {
			data[i] = 0x12
			i++
			i = encodeVarintTypes(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Failures) > 0 {
		for _, msg := range m.Failures {
			data[i] = 0x1a
			i++
			i = encodeVarintTypes(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Failure) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Failure) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Arn != nil {
		data[i] = 0x12
		i++
		i = encodeVarintTypes(data, i, uint64(len(*m.Arn)))
		i += copy(data[i:], *m.Arn)
	}
	if m.Reason != nil {
		data[i] = 0x1a
		i++
		i = encodeVarintTypes(data, i, uint64(len(*m.Reason)))
		i += copy(data[i:], *m.Reason)
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ListTasksInput) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ListTasksInput) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Cluster != nil {
		data[i] = 0x12
		i++
		i = encodeVarintTypes(data, i, uint64(len(*m.Cluster)))
		i += copy(data[i:], *m.Cluster)
	}
	if m.ContainerInstance != nil {
		data[i] = 0x1a
		i++
		i = encodeVarintTypes(data, i, uint64(len(*m.ContainerInstance)))
		i += copy(data[i:], *m.ContainerInstance)
	}
	if m.DesiredStatus != nil {
		data[i] = 0x22
		i++
		i = encodeVarintTypes(data, i, uint64(len(*m.DesiredStatus)))
		i += copy(data[i:], *m.DesiredStatus)
	}
	if m.Family != nil {
		data[i] = 0x2a
		i++
		i = encodeVarintTypes(data, i, uint64(len(*m.Family)))
		i += copy(data[i:], *m.Family)
	}
	if m.MaxResults != nil {
		data[i] = 0x30
		i++
		i = encodeVarintTypes(data, i, uint64((uint64(*m.MaxResults)<<1)^uint64((*m.MaxResults>>63))))
	}
	if m.NextToken != nil {
		data[i] = 0x3a
		i++
		i = encodeVarintTypes(data, i, uint64(len(*m.NextToken)))
		i += copy(data[i:], *m.NextToken)
	}
	if m.ServiceName != nil {
		data[i] = 0x42
		i++
		i = encodeVarintTypes(data, i, uint64(len(*m.ServiceName)))
		i += copy(data[i:], *m.ServiceName)
	}
	if m.StartedBy != nil {
		data[i] = 0x4a
		i++
		i = encodeVarintTypes(data, i, uint64(len(*m.StartedBy)))
		i += copy(data[i:], *m.StartedBy)
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ListTasksOutput) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ListTasksOutput) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NextToken != nil {
		data[i] = 0x12
		i++
		i = encodeVarintTypes(data, i, uint64(len(*m.NextToken)))
		i += copy(data[i:], *m.NextToken)
	}
	if len(m.TaskArns) > 0 {
		for _, s := range m.TaskArns {
			data[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				data[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			data[i] = uint8(l)
			i++
			i += copy(data[i:], s)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Resource) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Resource) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DoubleValue != nil {
		data[i] = 0x11
		i++
		i = encodeFixed64Types(data, i, uint64(math.Float64bits(float64(*m.DoubleValue))))
	}
	if m.IntegerValue != nil {
		data[i] = 0x18
		i++
		i = encodeVarintTypes(data, i, uint64((uint64(*m.IntegerValue)<<1)^uint64((*m.IntegerValue>>63))))
	}
	if m.LongValue != nil {
		data[i] = 0x20
		i++
		i = encodeVarintTypes(data, i, uint64((uint64(*m.LongValue)<<1)^uint64((*m.LongValue>>63))))
	}
	if m.Name != nil {
		data[i] = 0x2a
		i++
		i = encodeVarintTypes(data, i, uint64(len(*m.Name)))
		i += copy(data[i:], *m.Name)
	}
	if len(m.StringSetValue) > 0 {
		for _, s := range m.StringSetValue {
			data[i] = 0x32
			i++
			l = len(s)
			for l >= 1<<7 {
				data[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			data[i] = uint8(l)
			i++
			i += copy(data[i:], s)
		}
	}
	if m.Type != nil {
		data[i] = 0x3a
		i++
		i = encodeVarintTypes(data, i, uint64(len(*m.Type)))
		i += copy(data[i:], *m.Type)
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *VersionInfo) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *VersionInfo) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AgentHash != nil {
		data[i] = 0x12
		i++
		i = encodeVarintTypes(data, i, uint64(len(*m.AgentHash)))
		i += copy(data[i:], *m.AgentHash)
	}
	if m.AgentVersion != nil {
		data[i] = 0x1a
		i++
		i = encodeVarintTypes(data, i, uint64(len(*m.AgentVersion)))
		i += copy(data[i:], *m.AgentVersion)
	}
	if m.DockerVersion != nil {
		data[i] = 0x22
		i++
		i = encodeVarintTypes(data, i, uint64(len(*m.DockerVersion)))
		i += copy(data[i:], *m.DockerVersion)
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeFixed64Types(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Types(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintTypes(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedAttribute(r randyTypes, easy bool) *Attribute {
	this := &Attribute{}
	if r.Intn(10) != 0 {
		v1 := randStringTypes(r)
		this.Name = &v1
	}
	if r.Intn(10) != 0 {
		v2 := randStringTypes(r)
		this.Value = &v2
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTypes(r, 4)
	}
	return this
}

func NewPopulatedContainerInstance(r randyTypes, easy bool) *ContainerInstance {
	this := &ContainerInstance{}
	if r.Intn(10) != 0 {
		v3 := bool(bool(r.Intn(2) == 0))
		this.AgentConnected = &v3
	}
	if r.Intn(10) != 0 {
		v4 := randStringTypes(r)
		this.AgentUpdateStatus = &v4
	}
	if r.Intn(10) != 0 {
		v5 := r.Intn(5)
		this.Attributes = make([]*Attribute, v5)
		for i := 0; i < v5; i++ {
			this.Attributes[i] = NewPopulatedAttribute(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v6 := randStringTypes(r)
		this.ContainerInstanceArn = &v6
	}
	if r.Intn(10) != 0 {
		v7 := randStringTypes(r)
		this.Ec2InstanceId = &v7
	}
	if r.Intn(10) != 0 {
		v8 := int64(r.Int63())
		if r.Intn(2) == 0 {
			v8 *= -1
		}
		this.PendingTasksCount = &v8
	}
	if r.Intn(10) != 0 {
		v9 := r.Intn(5)
		this.RegisteredResources = make([]*Resource, v9)
		for i := 0; i < v9; i++ {
			this.RegisteredResources[i] = NewPopulatedResource(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v10 := r.Intn(5)
		this.RemainingResources = make([]*Resource, v10)
		for i := 0; i < v10; i++ {
			this.RemainingResources[i] = NewPopulatedResource(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v11 := int64(r.Int63())
		if r.Intn(2) == 0 {
			v11 *= -1
		}
		this.RunningTasksCount = &v11
	}
	if r.Intn(10) != 0 {
		v12 := randStringTypes(r)
		this.Status = &v12
	}
	if r.Intn(10) != 0 {
		this.VersionInfo = NewPopulatedVersionInfo(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTypes(r, 13)
	}
	return this
}

func NewPopulatedDescribeContainerInstancesInput(r randyTypes, easy bool) *DescribeContainerInstancesInput {
	this := &DescribeContainerInstancesInput{}
	if r.Intn(10) != 0 {
		v13 := randStringTypes(r)
		this.Cluster = &v13
	}
	if r.Intn(10) != 0 {
		v14 := r.Intn(10)
		this.ContainerInstances = make([]string, v14)
		for i := 0; i < v14; i++ {
			this.ContainerInstances[i] = randStringTypes(r)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTypes(r, 4)
	}
	return this
}

func NewPopulatedDescribeContainerInstancesOutput(r randyTypes, easy bool) *DescribeContainerInstancesOutput {
	this := &DescribeContainerInstancesOutput{}
	if r.Intn(10) != 0 {
		v15 := r.Intn(5)
		this.ContainerInstances = make([]*ContainerInstance, v15)
		for i := 0; i < v15; i++ {
			this.ContainerInstances[i] = NewPopulatedContainerInstance(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v16 := r.Intn(5)
		this.Failures = make([]*Failure, v16)
		for i := 0; i < v16; i++ {
			this.Failures[i] = NewPopulatedFailure(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTypes(r, 4)
	}
	return this
}

func NewPopulatedFailure(r randyTypes, easy bool) *Failure {
	this := &Failure{}
	if r.Intn(10) != 0 {
		v17 := randStringTypes(r)
		this.Arn = &v17
	}
	if r.Intn(10) != 0 {
		v18 := randStringTypes(r)
		this.Reason = &v18
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTypes(r, 4)
	}
	return this
}

func NewPopulatedListTasksInput(r randyTypes, easy bool) *ListTasksInput {
	this := &ListTasksInput{}
	if r.Intn(10) != 0 {
		v19 := randStringTypes(r)
		this.Cluster = &v19
	}
	if r.Intn(10) != 0 {
		v20 := randStringTypes(r)
		this.ContainerInstance = &v20
	}
	if r.Intn(10) != 0 {
		v21 := randStringTypes(r)
		this.DesiredStatus = &v21
	}
	if r.Intn(10) != 0 {
		v22 := randStringTypes(r)
		this.Family = &v22
	}
	if r.Intn(10) != 0 {
		v23 := int64(r.Int63())
		if r.Intn(2) == 0 {
			v23 *= -1
		}
		this.MaxResults = &v23
	}
	if r.Intn(10) != 0 {
		v24 := randStringTypes(r)
		this.NextToken = &v24
	}
	if r.Intn(10) != 0 {
		v25 := randStringTypes(r)
		this.ServiceName = &v25
	}
	if r.Intn(10) != 0 {
		v26 := randStringTypes(r)
		this.StartedBy = &v26
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTypes(r, 10)
	}
	return this
}

func NewPopulatedListTasksOutput(r randyTypes, easy bool) *ListTasksOutput {
	this := &ListTasksOutput{}
	if r.Intn(10) != 0 {
		v27 := randStringTypes(r)
		this.NextToken = &v27
	}
	if r.Intn(10) != 0 {
		v28 := r.Intn(10)
		this.TaskArns = make([]string, v28)
		for i := 0; i < v28; i++ {
			this.TaskArns[i] = randStringTypes(r)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTypes(r, 4)
	}
	return this
}

func NewPopulatedResource(r randyTypes, easy bool) *Resource {
	this := &Resource{}
	if r.Intn(10) != 0 {
		v29 := float64(r.Float64())
		if r.Intn(2) == 0 {
			v29 *= -1
		}
		this.DoubleValue = &v29
	}
	if r.Intn(10) != 0 {
		v30 := int64(r.Int63())
		if r.Intn(2) == 0 {
			v30 *= -1
		}
		this.IntegerValue = &v30
	}
	if r.Intn(10) != 0 {
		v31 := int64(r.Int63())
		if r.Intn(2) == 0 {
			v31 *= -1
		}
		this.LongValue = &v31
	}
	if r.Intn(10) != 0 {
		v32 := randStringTypes(r)
		this.Name = &v32
	}
	if r.Intn(10) != 0 {
		v33 := r.Intn(10)
		this.StringSetValue = make([]string, v33)
		for i := 0; i < v33; i++ {
			this.StringSetValue[i] = randStringTypes(r)
		}
	}
	if r.Intn(10) != 0 {
		v34 := randStringTypes(r)
		this.Type = &v34
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTypes(r, 8)
	}
	return this
}

func NewPopulatedVersionInfo(r randyTypes, easy bool) *VersionInfo {
	this := &VersionInfo{}
	if r.Intn(10) != 0 {
		v35 := randStringTypes(r)
		this.AgentHash = &v35
	}
	if r.Intn(10) != 0 {
		v36 := randStringTypes(r)
		this.AgentVersion = &v36
	}
	if r.Intn(10) != 0 {
		v37 := randStringTypes(r)
		this.DockerVersion = &v37
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTypes(r, 5)
	}
	return this
}

type randyTypes interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneTypes(r randyTypes) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringTypes(r randyTypes) string {
	v38 := r.Intn(100)
	tmps := make([]rune, v38)
	for i := 0; i < v38; i++ {
		tmps[i] = randUTF8RuneTypes(r)
	}
	return string(tmps)
}
func randUnrecognizedTypes(r randyTypes, maxFieldNumber int) (data []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		data = randFieldTypes(data, r, fieldNumber, wire)
	}
	return data
}
func randFieldTypes(data []byte, r randyTypes, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		data = encodeVarintPopulateTypes(data, uint64(key))
		v39 := r.Int63()
		if r.Intn(2) == 0 {
			v39 *= -1
		}
		data = encodeVarintPopulateTypes(data, uint64(v39))
	case 1:
		data = encodeVarintPopulateTypes(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		data = encodeVarintPopulateTypes(data, uint64(key))
		ll := r.Intn(100)
		data = encodeVarintPopulateTypes(data, uint64(ll))
		for j := 0; j < ll; j++ {
			data = append(data, byte(r.Intn(256)))
		}
	default:
		data = encodeVarintPopulateTypes(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return data
}
func encodeVarintPopulateTypes(data []byte, v uint64) []byte {
	for v >= 1<<7 {
		data = append(data, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	data = append(data, uint8(v))
	return data
}
func (m *Attribute) Size() (n int) {
	var l int
	_ = l
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Value != nil {
		l = len(*m.Value)
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ContainerInstance) Size() (n int) {
	var l int
	_ = l
	if m.AgentConnected != nil {
		n += 2
	}
	if m.AgentUpdateStatus != nil {
		l = len(*m.AgentUpdateStatus)
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Attributes) > 0 {
		for _, e := range m.Attributes {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.ContainerInstanceArn != nil {
		l = len(*m.ContainerInstanceArn)
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Ec2InstanceId != nil {
		l = len(*m.Ec2InstanceId)
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.PendingTasksCount != nil {
		n += 1 + sozTypes(uint64(*m.PendingTasksCount))
	}
	if len(m.RegisteredResources) > 0 {
		for _, e := range m.RegisteredResources {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.RemainingResources) > 0 {
		for _, e := range m.RemainingResources {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.RunningTasksCount != nil {
		n += 1 + sozTypes(uint64(*m.RunningTasksCount))
	}
	if m.Status != nil {
		l = len(*m.Status)
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.VersionInfo != nil {
		l = m.VersionInfo.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DescribeContainerInstancesInput) Size() (n int) {
	var l int
	_ = l
	if m.Cluster != nil {
		l = len(*m.Cluster)
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.ContainerInstances) > 0 {
		for _, s := range m.ContainerInstances {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DescribeContainerInstancesOutput) Size() (n int) {
	var l int
	_ = l
	if len(m.ContainerInstances) > 0 {
		for _, e := range m.ContainerInstances {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.Failures) > 0 {
		for _, e := range m.Failures {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Failure) Size() (n int) {
	var l int
	_ = l
	if m.Arn != nil {
		l = len(*m.Arn)
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Reason != nil {
		l = len(*m.Reason)
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListTasksInput) Size() (n int) {
	var l int
	_ = l
	if m.Cluster != nil {
		l = len(*m.Cluster)
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.ContainerInstance != nil {
		l = len(*m.ContainerInstance)
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.DesiredStatus != nil {
		l = len(*m.DesiredStatus)
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Family != nil {
		l = len(*m.Family)
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.MaxResults != nil {
		n += 1 + sozTypes(uint64(*m.MaxResults))
	}
	if m.NextToken != nil {
		l = len(*m.NextToken)
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.ServiceName != nil {
		l = len(*m.ServiceName)
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.StartedBy != nil {
		l = len(*m.StartedBy)
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListTasksOutput) Size() (n int) {
	var l int
	_ = l
	if m.NextToken != nil {
		l = len(*m.NextToken)
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.TaskArns) > 0 {
		for _, s := range m.TaskArns {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Resource) Size() (n int) {
	var l int
	_ = l
	if m.DoubleValue != nil {
		n += 9
	}
	if m.IntegerValue != nil {
		n += 1 + sozTypes(uint64(*m.IntegerValue))
	}
	if m.LongValue != nil {
		n += 1 + sozTypes(uint64(*m.LongValue))
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.StringSetValue) > 0 {
		for _, s := range m.StringSetValue {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.Type != nil {
		l = len(*m.Type)
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VersionInfo) Size() (n int) {
	var l int
	_ = l
	if m.AgentHash != nil {
		l = len(*m.AgentHash)
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.AgentVersion != nil {
		l = len(*m.AgentVersion)
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.DockerVersion != nil {
		l = len(*m.DockerVersion)
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovTypes(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Attribute) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Attribute: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Attribute: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.Value = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContainerInstance) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContainerInstance: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContainerInstance: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgentConnected", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.AgentConnected = &b
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgentUpdateStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.AgentUpdateStatus = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attributes = append(m.Attributes, &Attribute{})
			if err := m.Attributes[len(m.Attributes)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainerInstanceArn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.ContainerInstanceArn = &s
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ec2InstanceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.Ec2InstanceId = &s
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingTasksCount", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.PendingTasksCount = &v2
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegisteredResources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RegisteredResources = append(m.RegisteredResources, &Resource{})
			if err := m.RegisteredResources[len(m.RegisteredResources)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemainingResources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemainingResources = append(m.RemainingResources, &Resource{})
			if err := m.RemainingResources[len(m.RemainingResources)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunningTasksCount", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RunningTasksCount = &v2
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.Status = &s
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VersionInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VersionInfo == nil {
				m.VersionInfo = &VersionInfo{}
			}
			if err := m.VersionInfo.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DescribeContainerInstancesInput) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DescribeContainerInstancesInput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DescribeContainerInstancesInput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cluster", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.Cluster = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainerInstances", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContainerInstances = append(m.ContainerInstances, string(data[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DescribeContainerInstancesOutput) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DescribeContainerInstancesOutput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DescribeContainerInstancesOutput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainerInstances", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContainerInstances = append(m.ContainerInstances, &ContainerInstance{})
			if err := m.ContainerInstances[len(m.ContainerInstances)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Failures", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Failures = append(m.Failures, &Failure{})
			if err := m.Failures[len(m.Failures)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Failure) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Failure: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Failure: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.Arn = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.Reason = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListTasksInput) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListTasksInput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListTasksInput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cluster", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.Cluster = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainerInstance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.ContainerInstance = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DesiredStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.DesiredStatus = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Family", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.Family = &s
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxResults", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.MaxResults = &v2
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.NextToken = &s
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.ServiceName = &s
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartedBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.StartedBy = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListTasksOutput) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListTasksOutput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListTasksOutput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.NextToken = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskArns", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskArns = append(m.TaskArns, string(data[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Resource) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Resource: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Resource: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoubleValue", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(data[iNdEx-8])
			v |= uint64(data[iNdEx-7]) << 8
			v |= uint64(data[iNdEx-6]) << 16
			v |= uint64(data[iNdEx-5]) << 24
			v |= uint64(data[iNdEx-4]) << 32
			v |= uint64(data[iNdEx-3]) << 40
			v |= uint64(data[iNdEx-2]) << 48
			v |= uint64(data[iNdEx-1]) << 56
			v2 := float64(math.Float64frombits(v))
			m.DoubleValue = &v2
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IntegerValue", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.IntegerValue = &v2
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LongValue", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.LongValue = &v2
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StringSetValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StringSetValue = append(m.StringSetValue, string(data[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.Type = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VersionInfo) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VersionInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VersionInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgentHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.AgentHash = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgentVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.AgentVersion = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DockerVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.DockerVersion = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTypes(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTypes = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes   = fmt.Errorf("proto: integer overflow")
)

var fileDescriptorTypes = []byte{
	// 837 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x54, 0xcd, 0x8e, 0xe3, 0x44,
	0x10, 0x56, 0x26, 0x99, 0x8c, 0x53, 0xce, 0x04, 0xd2, 0x3b, 0x5a, 0xac, 0x08, 0xcd, 0x06, 0x0b,
	0xa1, 0x3d, 0x2c, 0x19, 0x14, 0x84, 0x84, 0x10, 0x97, 0xd9, 0x59, 0x16, 0x22, 0x96, 0x65, 0xd5,
	0x19, 0xf6, 0xc0, 0xad, 0xe3, 0x54, 0xbc, 0x56, 0x92, 0xee, 0xc8, 0xdd, 0x1e, 0x76, 0xde, 0x83,
	0x27, 0xe0, 0x34, 0x8f, 0xc0, 0x09, 0x21, 0x71, 0xe1, 0xc8, 0x23, 0x00, 0x4f, 0xc1, 0x91, 0xee,
	0x76, 0x3b, 0x71, 0xec, 0xf0, 0x73, 0xb0, 0xe4, 0xfa, 0xea, 0xab, 0xdf, 0xae, 0x2a, 0xf0, 0xd5,
	0xed, 0x06, 0xe5, 0x68, 0x93, 0x0a, 0x25, 0xc8, 0xa9, 0xd8, 0x48, 0xc4, 0x11, 0xfb, 0x4e, 0x8e,
	0x30, 0x92, 0x83, 0xf7, 0xe3, 0x44, 0xbd, 0xca, 0x66, 0xa3, 0x48, 0xac, 0x2f, 0x62, 0x11, 0x8b,
	0x0b, 0xcb, 0x9a, 0x65, 0x0b, 0x2b, 0x59, 0xc1, 0xfe, 0xe5, 0xd6, 0x83, 0x0f, 0x4a, 0x74, 0xeb,
	0x68, 0xc7, 0xb7, 0x62, 0x6e, 0x90, 0x87, 0xc8, 0x2d, 0x3e, 0xf9, 0x5f, 0x16, 0x36, 0xc3, 0x0b,
	0x95, 0xac, 0x51, 0x2a, 0xb6, 0xde, 0xe4, 0xb6, 0xe1, 0x47, 0xd0, 0xb9, 0x54, 0x2a, 0x4d, 0x66,
	0x99, 0x42, 0x42, 0xa0, 0xf5, 0x9c, 0xad, 0x31, 0x38, 0x1a, 0x36, 0x1e, 0x76, 0x68, 0x8b, 0xeb,
	0x7f, 0x72, 0x06, 0xc7, 0x2f, 0xd9, 0x2a, 0xc3, 0xa0, 0x69, 0xc1, 0xe3, 0x1b, 0x23, 0x84, 0xbf,
	0xb4, 0xa0, 0x7f, 0x25, 0xb8, 0x62, 0x09, 0xc7, 0x74, 0xc2, 0xb5, 0x47, 0x1e, 0x21, 0x79, 0x0f,
	0x7a, 0x97, 0x31, 0x72, 0xa5, 0x35, 0x1c, 0x23, 0x85, 0x73, 0xeb, 0xc9, 0xa3, 0x3d, 0xb6, 0x87,
	0x92, 0x47, 0xd0, 0xb7, 0xbc, 0x6f, 0x36, 0x73, 0xa6, 0x70, 0xaa, 0x98, 0xca, 0xa4, 0xf3, 0xdf,
	0x67, 0x55, 0x05, 0xf9, 0x18, 0x60, 0x9b, 0xa2, 0x0c, 0x5a, 0xc3, 0xe6, 0x43, 0x7f, 0x1c, 0x8c,
	0xf6, 0x7a, 0x3c, 0xda, 0x12, 0x28, 0xb0, 0x2d, 0x97, 0x8c, 0xe1, 0xac, 0x96, 0xe4, 0x65, 0xca,
	0x83, 0x63, 0x1b, 0xea, 0x2c, 0x3a, 0xa0, 0x23, 0xef, 0xc2, 0xe9, 0x67, 0xd1, 0xb8, 0x40, 0x26,
	0xf3, 0xa0, 0x6d, 0xc9, 0xa7, 0x58, 0x06, 0x4d, 0x05, 0x2f, 0x90, 0xcf, 0x13, 0x1e, 0x5f, 0x33,
	0xb9, 0x94, 0x57, 0x22, 0xe3, 0x2a, 0x38, 0xd1, 0x4c, 0x42, 0xfb, 0x9b, 0xaa, 0x82, 0x4c, 0xe0,
	0x1e, 0xc5, 0x38, 0x91, 0x0a, 0x53, 0x9c, 0x53, 0x94, 0x22, 0x4b, 0x23, 0x5d, 0x8a, 0x67, 0x4b,
	0x79, 0xab, 0x52, 0x4a, 0xa1, 0xa7, 0xf7, 0xd2, 0xba, 0x0d, 0xf9, 0x1c, 0x08, 0xc5, 0xb5, 0xce,
	0x5a, 0x47, 0xd8, 0x79, 0xea, 0xfc, 0xbb, 0x27, 0x92, 0xd6, 0x4c, 0x4c, 0x05, 0x34, 0xe3, 0x7c,
	0xbf, 0x02, 0xc8, 0x2b, 0x48, 0xab, 0x0a, 0x72, 0x1f, 0xda, 0xee, 0x99, 0x7c, 0xdb, 0x8e, 0xb6,
	0xcc, 0xdf, 0xe6, 0x53, 0xf0, 0x5f, 0x62, 0x2a, 0x13, 0xc1, 0x27, 0x7c, 0x21, 0x82, 0xae, 0x56,
	0xfa, 0xe3, 0x41, 0x25, 0x8f, 0x12, 0x83, 0xfa, 0x37, 0x3b, 0x21, 0x5c, 0xc2, 0x83, 0x27, 0x28,
	0x23, 0xfd, 0x5c, 0x58, 0x7b, 0x27, 0x39, 0xe1, 0x9b, 0x4c, 0x91, 0x00, 0x4e, 0xae, 0x56, 0x99,
	0xe9, 0x82, 0x9b, 0xca, 0x93, 0x28, 0x17, 0xc9, 0x08, 0x48, 0xdd, 0x48, 0x4f, 0x51, 0x53, 0x93,
	0x48, 0xed, 0x69, 0x65, 0x78, 0xd7, 0x80, 0xe1, 0x3f, 0x47, 0xfb, 0x3a, 0x53, 0x26, 0xdc, 0x8b,
	0x83, 0x4e, 0x8f, 0x6c, 0x7b, 0x87, 0x95, 0xb2, 0x6a, 0xc4, 0x43, 0x61, 0xf5, 0x0c, 0x7a, 0x4f,
	0x59, 0xb2, 0xca, 0x52, 0x97, 0x9c, 0x3f, 0xbe, 0x5f, 0xf1, 0xe3, 0xd4, 0xd4, 0x5b, 0x38, 0x5e,
	0xf8, 0x21, 0x9c, 0x38, 0x90, 0xbc, 0x09, 0x4d, 0x33, 0xb1, 0x79, 0xed, 0x4d, 0xa6, 0x07, 0x54,
	0x3f, 0x05, 0x45, 0x26, 0x05, 0x77, 0x1b, 0xd3, 0x4e, 0xad, 0x14, 0x7e, 0x7f, 0x04, 0xbd, 0x67,
	0x7a, 0x5e, 0xec, 0xab, 0xfd, 0x57, 0xf3, 0x1e, 0x1d, 0x58, 0xdf, 0x62, 0x03, 0x6b, 0x45, 0x98,
	0x9d, 0xd0, 0x9d, 0x4b, 0xf4, 0x20, 0xba, 0x21, 0x68, 0xe5, 0x3b, 0x31, 0x2f, 0x83, 0x26, 0xb1,
	0xa7, 0x6c, 0x9d, 0xac, 0x6e, 0xdd, 0x7e, 0xb5, 0x17, 0x56, 0x22, 0xe7, 0x00, 0x5f, 0xb1, 0xd7,
	0x7a, 0xf2, 0xb2, 0x95, 0x92, 0x76, 0x9d, 0x08, 0x85, 0xf5, 0x16, 0x21, 0x6f, 0x43, 0xe7, 0x39,
	0xbe, 0x56, 0xd7, 0x62, 0x89, 0xdc, 0xee, 0x50, 0x87, 0x76, 0x78, 0x01, 0x90, 0x21, 0xf8, 0x53,
	0x4c, 0x6f, 0x92, 0x08, 0xed, 0x69, 0xf2, 0xac, 0xde, 0x97, 0x3b, 0xc8, 0xd8, 0xeb, 0x0c, 0x52,
	0x7d, 0x58, 0x1e, 0xdf, 0xea, 0x4d, 0xb0, 0xf6, 0xb2, 0x00, 0xc2, 0x2f, 0xe1, 0x8d, 0x6d, 0x57,
	0xdc, 0x23, 0xef, 0x05, 0x3c, 0xaa, 0x06, 0x1c, 0x80, 0x67, 0xc8, 0xba, 0xeb, 0xc5, 0x34, 0x79,
	0xca, 0xc9, 0xe1, 0x4f, 0x0d, 0xf0, 0x8a, 0x15, 0x32, 0x99, 0x3d, 0x11, 0xd9, 0x6c, 0x85, 0xf9,
	0x7d, 0x34, 0x8e, 0x1a, 0xd4, 0x9f, 0xef, 0x20, 0x12, 0x42, 0x77, 0xc2, 0x15, 0xc6, 0x98, 0xee,
	0x4e, 0x28, 0xa1, 0xdd, 0xa4, 0x84, 0x99, 0x64, 0x9e, 0x09, 0x1e, 0xe7, 0x84, 0x96, 0x25, 0x74,
	0x56, 0x05, 0xb0, 0xbd, 0xc8, 0xc7, 0xa5, 0x8b, 0xac, 0xaf, 0xec, 0x54, 0x9f, 0x38, 0x1e, 0x4f,
	0x51, 0xe5, 0x66, 0x6d, 0x9b, 0x66, 0x4f, 0xee, 0xa1, 0xc6, 0xf6, 0x5a, 0xdf, 0x7c, 0xd7, 0xd2,
	0x96, 0xb9, 0xff, 0x61, 0xb6, 0xb7, 0xaf, 0x26, 0xb8, 0x3d, 0xc4, 0x5f, 0x30, 0xf9, 0xaa, 0xe8,
	0x04, 0x2b, 0x00, 0x93, 0xbe, 0xd5, 0x3a, 0x0b, 0x37, 0x1f, 0x5d, 0x56, 0xc2, 0xec, 0x68, 0x88,
	0x68, 0xa9, 0xab, 0x71, 0xa4, 0x62, 0x34, 0xca, 0xe0, 0xe3, 0x77, 0xfe, 0xfa, 0xe3, 0xbc, 0x71,
	0xf7, 0xe7, 0x79, 0xe3, 0x47, 0xfd, 0xfd, 0xaa, 0xbf, 0xdf, 0xf4, 0xf7, 0xbb, 0xfe, 0x7e, 0xfe,
	0xe1, 0x41, 0xe3, 0xdb, 0xa6, 0xde, 0x82, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0x23, 0x6b, 0x7b,
	0x47, 0x42, 0x07, 0x00, 0x00,
}
