// Code generated by protoc-gen-gogo.
// source: types.proto
// DO NOT EDIT!

/*
Package cloudwatch is a generated protocol buffer package.

It is generated from these files:
	types.proto

It has these top-level messages:
	Datapoint
	Dimension
	DimensionFilter
	GetMetricStatisticsInput
	GetMetricStatisticsOutput
	ListMetricsInput
	ListMetricsOutput
	Metric
*/
package cloudwatch

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/opsee/protobuf/opseeproto"

import bytes "bytes"

import github_com_graphql_go_graphql "github.com/graphql-go/graphql"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Datapoint struct {
	Average          *float64 `protobuf:"fixed64,2,opt,name=Average" json:"Average,omitempty"`
	Maximum          *float64 `protobuf:"fixed64,3,opt,name=Maximum" json:"Maximum,omitempty"`
	Minimum          *float64 `protobuf:"fixed64,4,opt,name=Minimum" json:"Minimum,omitempty"`
	SampleCount      *float64 `protobuf:"fixed64,5,opt,name=SampleCount" json:"SampleCount,omitempty"`
	Sum              *float64 `protobuf:"fixed64,6,opt,name=Sum" json:"Sum,omitempty"`
	Timestamp        *int64   `protobuf:"fixed64,7,opt,name=Timestamp" json:"Timestamp,omitempty"`
	Unit             *string  `protobuf:"bytes,8,opt,name=Unit" json:"Unit,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *Datapoint) Reset()         { *m = Datapoint{} }
func (m *Datapoint) String() string { return proto.CompactTextString(m) }
func (*Datapoint) ProtoMessage()    {}

func (m *Datapoint) GetAverage() float64 {
	if m != nil && m.Average != nil {
		return *m.Average
	}
	return 0
}

func (m *Datapoint) GetMaximum() float64 {
	if m != nil && m.Maximum != nil {
		return *m.Maximum
	}
	return 0
}

func (m *Datapoint) GetMinimum() float64 {
	if m != nil && m.Minimum != nil {
		return *m.Minimum
	}
	return 0
}

func (m *Datapoint) GetSampleCount() float64 {
	if m != nil && m.SampleCount != nil {
		return *m.SampleCount
	}
	return 0
}

func (m *Datapoint) GetSum() float64 {
	if m != nil && m.Sum != nil {
		return *m.Sum
	}
	return 0
}

func (m *Datapoint) GetTimestamp() int64 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

func (m *Datapoint) GetUnit() string {
	if m != nil && m.Unit != nil {
		return *m.Unit
	}
	return ""
}

type Dimension struct {
	Name             *string `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
	Value            *string `protobuf:"bytes,3,opt,name=Value" json:"Value,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Dimension) Reset()         { *m = Dimension{} }
func (m *Dimension) String() string { return proto.CompactTextString(m) }
func (*Dimension) ProtoMessage()    {}

func (m *Dimension) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Dimension) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

type DimensionFilter struct {
	Name             *string `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
	Value            *string `protobuf:"bytes,3,opt,name=Value" json:"Value,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *DimensionFilter) Reset()         { *m = DimensionFilter{} }
func (m *DimensionFilter) String() string { return proto.CompactTextString(m) }
func (*DimensionFilter) ProtoMessage()    {}

func (m *DimensionFilter) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *DimensionFilter) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

type GetMetricStatisticsInput struct {
	Dimensions       []*Dimension `protobuf:"bytes,2,rep,name=Dimensions" json:"Dimensions,omitempty"`
	EndTime          *int64       `protobuf:"fixed64,3,opt,name=EndTime" json:"EndTime,omitempty"`
	MetricName       *string      `protobuf:"bytes,4,opt,name=MetricName" json:"MetricName,omitempty"`
	Namespace        *string      `protobuf:"bytes,5,opt,name=Namespace" json:"Namespace,omitempty"`
	Period           *int64       `protobuf:"zigzag64,6,opt,name=Period" json:"Period,omitempty"`
	StartTime        *int64       `protobuf:"fixed64,7,opt,name=StartTime" json:"StartTime,omitempty"`
	Statistics       []string     `protobuf:"bytes,8,rep,name=Statistics" json:"Statistics,omitempty"`
	Unit             *string      `protobuf:"bytes,9,opt,name=Unit" json:"Unit,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *GetMetricStatisticsInput) Reset()         { *m = GetMetricStatisticsInput{} }
func (m *GetMetricStatisticsInput) String() string { return proto.CompactTextString(m) }
func (*GetMetricStatisticsInput) ProtoMessage()    {}

func (m *GetMetricStatisticsInput) GetDimensions() []*Dimension {
	if m != nil {
		return m.Dimensions
	}
	return nil
}

func (m *GetMetricStatisticsInput) GetEndTime() int64 {
	if m != nil && m.EndTime != nil {
		return *m.EndTime
	}
	return 0
}

func (m *GetMetricStatisticsInput) GetMetricName() string {
	if m != nil && m.MetricName != nil {
		return *m.MetricName
	}
	return ""
}

func (m *GetMetricStatisticsInput) GetNamespace() string {
	if m != nil && m.Namespace != nil {
		return *m.Namespace
	}
	return ""
}

func (m *GetMetricStatisticsInput) GetPeriod() int64 {
	if m != nil && m.Period != nil {
		return *m.Period
	}
	return 0
}

func (m *GetMetricStatisticsInput) GetStartTime() int64 {
	if m != nil && m.StartTime != nil {
		return *m.StartTime
	}
	return 0
}

func (m *GetMetricStatisticsInput) GetStatistics() []string {
	if m != nil {
		return m.Statistics
	}
	return nil
}

func (m *GetMetricStatisticsInput) GetUnit() string {
	if m != nil && m.Unit != nil {
		return *m.Unit
	}
	return ""
}

type GetMetricStatisticsOutput struct {
	Datapoints       []*Datapoint `protobuf:"bytes,2,rep,name=Datapoints" json:"Datapoints,omitempty"`
	Label            *string      `protobuf:"bytes,3,opt,name=Label" json:"Label,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *GetMetricStatisticsOutput) Reset()         { *m = GetMetricStatisticsOutput{} }
func (m *GetMetricStatisticsOutput) String() string { return proto.CompactTextString(m) }
func (*GetMetricStatisticsOutput) ProtoMessage()    {}

func (m *GetMetricStatisticsOutput) GetDatapoints() []*Datapoint {
	if m != nil {
		return m.Datapoints
	}
	return nil
}

func (m *GetMetricStatisticsOutput) GetLabel() string {
	if m != nil && m.Label != nil {
		return *m.Label
	}
	return ""
}

type ListMetricsInput struct {
	Dimensions       []*DimensionFilter `protobuf:"bytes,2,rep,name=Dimensions" json:"Dimensions,omitempty"`
	MetricName       *string            `protobuf:"bytes,3,opt,name=MetricName" json:"MetricName,omitempty"`
	Namespace        *string            `protobuf:"bytes,4,opt,name=Namespace" json:"Namespace,omitempty"`
	NextToken        *string            `protobuf:"bytes,5,opt,name=NextToken" json:"NextToken,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *ListMetricsInput) Reset()         { *m = ListMetricsInput{} }
func (m *ListMetricsInput) String() string { return proto.CompactTextString(m) }
func (*ListMetricsInput) ProtoMessage()    {}

func (m *ListMetricsInput) GetDimensions() []*DimensionFilter {
	if m != nil {
		return m.Dimensions
	}
	return nil
}

func (m *ListMetricsInput) GetMetricName() string {
	if m != nil && m.MetricName != nil {
		return *m.MetricName
	}
	return ""
}

func (m *ListMetricsInput) GetNamespace() string {
	if m != nil && m.Namespace != nil {
		return *m.Namespace
	}
	return ""
}

func (m *ListMetricsInput) GetNextToken() string {
	if m != nil && m.NextToken != nil {
		return *m.NextToken
	}
	return ""
}

type ListMetricsOutput struct {
	Metrics          []*Metric `protobuf:"bytes,2,rep,name=Metrics" json:"Metrics,omitempty"`
	NextToken        *string   `protobuf:"bytes,3,opt,name=NextToken" json:"NextToken,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *ListMetricsOutput) Reset()         { *m = ListMetricsOutput{} }
func (m *ListMetricsOutput) String() string { return proto.CompactTextString(m) }
func (*ListMetricsOutput) ProtoMessage()    {}

func (m *ListMetricsOutput) GetMetrics() []*Metric {
	if m != nil {
		return m.Metrics
	}
	return nil
}

func (m *ListMetricsOutput) GetNextToken() string {
	if m != nil && m.NextToken != nil {
		return *m.NextToken
	}
	return ""
}

type Metric struct {
	Dimensions       []*Dimension `protobuf:"bytes,2,rep,name=Dimensions" json:"Dimensions,omitempty"`
	MetricName       *string      `protobuf:"bytes,3,opt,name=MetricName" json:"MetricName,omitempty"`
	Namespace        *string      `protobuf:"bytes,4,opt,name=Namespace" json:"Namespace,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *Metric) Reset()         { *m = Metric{} }
func (m *Metric) String() string { return proto.CompactTextString(m) }
func (*Metric) ProtoMessage()    {}

func (m *Metric) GetDimensions() []*Dimension {
	if m != nil {
		return m.Dimensions
	}
	return nil
}

func (m *Metric) GetMetricName() string {
	if m != nil && m.MetricName != nil {
		return *m.MetricName
	}
	return ""
}

func (m *Metric) GetNamespace() string {
	if m != nil && m.Namespace != nil {
		return *m.Namespace
	}
	return ""
}

func init() {
	proto.RegisterType((*Datapoint)(nil), "opsee.aws.cloudwatch.Datapoint")
	proto.RegisterType((*Dimension)(nil), "opsee.aws.cloudwatch.Dimension")
	proto.RegisterType((*DimensionFilter)(nil), "opsee.aws.cloudwatch.DimensionFilter")
	proto.RegisterType((*GetMetricStatisticsInput)(nil), "opsee.aws.cloudwatch.GetMetricStatisticsInput")
	proto.RegisterType((*GetMetricStatisticsOutput)(nil), "opsee.aws.cloudwatch.GetMetricStatisticsOutput")
	proto.RegisterType((*ListMetricsInput)(nil), "opsee.aws.cloudwatch.ListMetricsInput")
	proto.RegisterType((*ListMetricsOutput)(nil), "opsee.aws.cloudwatch.ListMetricsOutput")
	proto.RegisterType((*Metric)(nil), "opsee.aws.cloudwatch.Metric")
}
func (this *Datapoint) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Datapoint)
	if !ok {
		that2, ok := that.(Datapoint)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Average != nil && that1.Average != nil {
		if *this.Average != *that1.Average {
			return false
		}
	} else if this.Average != nil {
		return false
	} else if that1.Average != nil {
		return false
	}
	if this.Maximum != nil && that1.Maximum != nil {
		if *this.Maximum != *that1.Maximum {
			return false
		}
	} else if this.Maximum != nil {
		return false
	} else if that1.Maximum != nil {
		return false
	}
	if this.Minimum != nil && that1.Minimum != nil {
		if *this.Minimum != *that1.Minimum {
			return false
		}
	} else if this.Minimum != nil {
		return false
	} else if that1.Minimum != nil {
		return false
	}
	if this.SampleCount != nil && that1.SampleCount != nil {
		if *this.SampleCount != *that1.SampleCount {
			return false
		}
	} else if this.SampleCount != nil {
		return false
	} else if that1.SampleCount != nil {
		return false
	}
	if this.Sum != nil && that1.Sum != nil {
		if *this.Sum != *that1.Sum {
			return false
		}
	} else if this.Sum != nil {
		return false
	} else if that1.Sum != nil {
		return false
	}
	if this.Timestamp != nil && that1.Timestamp != nil {
		if *this.Timestamp != *that1.Timestamp {
			return false
		}
	} else if this.Timestamp != nil {
		return false
	} else if that1.Timestamp != nil {
		return false
	}
	if this.Unit != nil && that1.Unit != nil {
		if *this.Unit != *that1.Unit {
			return false
		}
	} else if this.Unit != nil {
		return false
	} else if that1.Unit != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Dimension) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Dimension)
	if !ok {
		that2, ok := that.(Dimension)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Name != nil && that1.Name != nil {
		if *this.Name != *that1.Name {
			return false
		}
	} else if this.Name != nil {
		return false
	} else if that1.Name != nil {
		return false
	}
	if this.Value != nil && that1.Value != nil {
		if *this.Value != *that1.Value {
			return false
		}
	} else if this.Value != nil {
		return false
	} else if that1.Value != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *DimensionFilter) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DimensionFilter)
	if !ok {
		that2, ok := that.(DimensionFilter)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Name != nil && that1.Name != nil {
		if *this.Name != *that1.Name {
			return false
		}
	} else if this.Name != nil {
		return false
	} else if that1.Name != nil {
		return false
	}
	if this.Value != nil && that1.Value != nil {
		if *this.Value != *that1.Value {
			return false
		}
	} else if this.Value != nil {
		return false
	} else if that1.Value != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *GetMetricStatisticsInput) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GetMetricStatisticsInput)
	if !ok {
		that2, ok := that.(GetMetricStatisticsInput)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Dimensions) != len(that1.Dimensions) {
		return false
	}
	for i := range this.Dimensions {
		if !this.Dimensions[i].Equal(that1.Dimensions[i]) {
			return false
		}
	}
	if this.EndTime != nil && that1.EndTime != nil {
		if *this.EndTime != *that1.EndTime {
			return false
		}
	} else if this.EndTime != nil {
		return false
	} else if that1.EndTime != nil {
		return false
	}
	if this.MetricName != nil && that1.MetricName != nil {
		if *this.MetricName != *that1.MetricName {
			return false
		}
	} else if this.MetricName != nil {
		return false
	} else if that1.MetricName != nil {
		return false
	}
	if this.Namespace != nil && that1.Namespace != nil {
		if *this.Namespace != *that1.Namespace {
			return false
		}
	} else if this.Namespace != nil {
		return false
	} else if that1.Namespace != nil {
		return false
	}
	if this.Period != nil && that1.Period != nil {
		if *this.Period != *that1.Period {
			return false
		}
	} else if this.Period != nil {
		return false
	} else if that1.Period != nil {
		return false
	}
	if this.StartTime != nil && that1.StartTime != nil {
		if *this.StartTime != *that1.StartTime {
			return false
		}
	} else if this.StartTime != nil {
		return false
	} else if that1.StartTime != nil {
		return false
	}
	if len(this.Statistics) != len(that1.Statistics) {
		return false
	}
	for i := range this.Statistics {
		if this.Statistics[i] != that1.Statistics[i] {
			return false
		}
	}
	if this.Unit != nil && that1.Unit != nil {
		if *this.Unit != *that1.Unit {
			return false
		}
	} else if this.Unit != nil {
		return false
	} else if that1.Unit != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *GetMetricStatisticsOutput) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GetMetricStatisticsOutput)
	if !ok {
		that2, ok := that.(GetMetricStatisticsOutput)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Datapoints) != len(that1.Datapoints) {
		return false
	}
	for i := range this.Datapoints {
		if !this.Datapoints[i].Equal(that1.Datapoints[i]) {
			return false
		}
	}
	if this.Label != nil && that1.Label != nil {
		if *this.Label != *that1.Label {
			return false
		}
	} else if this.Label != nil {
		return false
	} else if that1.Label != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ListMetricsInput) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ListMetricsInput)
	if !ok {
		that2, ok := that.(ListMetricsInput)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Dimensions) != len(that1.Dimensions) {
		return false
	}
	for i := range this.Dimensions {
		if !this.Dimensions[i].Equal(that1.Dimensions[i]) {
			return false
		}
	}
	if this.MetricName != nil && that1.MetricName != nil {
		if *this.MetricName != *that1.MetricName {
			return false
		}
	} else if this.MetricName != nil {
		return false
	} else if that1.MetricName != nil {
		return false
	}
	if this.Namespace != nil && that1.Namespace != nil {
		if *this.Namespace != *that1.Namespace {
			return false
		}
	} else if this.Namespace != nil {
		return false
	} else if that1.Namespace != nil {
		return false
	}
	if this.NextToken != nil && that1.NextToken != nil {
		if *this.NextToken != *that1.NextToken {
			return false
		}
	} else if this.NextToken != nil {
		return false
	} else if that1.NextToken != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ListMetricsOutput) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ListMetricsOutput)
	if !ok {
		that2, ok := that.(ListMetricsOutput)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Metrics) != len(that1.Metrics) {
		return false
	}
	for i := range this.Metrics {
		if !this.Metrics[i].Equal(that1.Metrics[i]) {
			return false
		}
	}
	if this.NextToken != nil && that1.NextToken != nil {
		if *this.NextToken != *that1.NextToken {
			return false
		}
	} else if this.NextToken != nil {
		return false
	} else if that1.NextToken != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Metric) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Metric)
	if !ok {
		that2, ok := that.(Metric)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Dimensions) != len(that1.Dimensions) {
		return false
	}
	for i := range this.Dimensions {
		if !this.Dimensions[i].Equal(that1.Dimensions[i]) {
			return false
		}
	}
	if this.MetricName != nil && that1.MetricName != nil {
		if *this.MetricName != *that1.MetricName {
			return false
		}
	} else if this.MetricName != nil {
		return false
	} else if that1.MetricName != nil {
		return false
	}
	if this.Namespace != nil && that1.Namespace != nil {
		if *this.Namespace != *that1.Namespace {
			return false
		}
	} else if this.Namespace != nil {
		return false
	} else if that1.Namespace != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}

type DatapointGetter interface {
	GetDatapoint() *Datapoint
}

var GraphQLDatapointType *github_com_graphql_go_graphql.Object

type DimensionGetter interface {
	GetDimension() *Dimension
}

var GraphQLDimensionType *github_com_graphql_go_graphql.Object

type DimensionFilterGetter interface {
	GetDimensionFilter() *DimensionFilter
}

var GraphQLDimensionFilterType *github_com_graphql_go_graphql.Object

type GetMetricStatisticsInputGetter interface {
	GetGetMetricStatisticsInput() *GetMetricStatisticsInput
}

var GraphQLGetMetricStatisticsInputType *github_com_graphql_go_graphql.Object

type GetMetricStatisticsOutputGetter interface {
	GetGetMetricStatisticsOutput() *GetMetricStatisticsOutput
}

var GraphQLGetMetricStatisticsOutputType *github_com_graphql_go_graphql.Object

type ListMetricsInputGetter interface {
	GetListMetricsInput() *ListMetricsInput
}

var GraphQLListMetricsInputType *github_com_graphql_go_graphql.Object

type ListMetricsOutputGetter interface {
	GetListMetricsOutput() *ListMetricsOutput
}

var GraphQLListMetricsOutputType *github_com_graphql_go_graphql.Object

type MetricGetter interface {
	GetMetric() *Metric
}

var GraphQLMetricType *github_com_graphql_go_graphql.Object

func init() {
	GraphQLDatapointType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "cloudwatchDatapoint",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"Average": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Float,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Datapoint)
						if ok {
							if obj.Average == nil {
								return nil, nil
							}
							return obj.GetAverage(), nil
						}
						inter, ok := p.Source.(DatapointGetter)
						if ok {
							face := inter.GetDatapoint()
							if face == nil {
								return nil, nil
							}
							if face.Average == nil {
								return nil, nil
							}
							return face.GetAverage(), nil
						}
						return nil, fmt.Errorf("field Average not resolved")
					},
				},
				"Maximum": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Float,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Datapoint)
						if ok {
							if obj.Maximum == nil {
								return nil, nil
							}
							return obj.GetMaximum(), nil
						}
						inter, ok := p.Source.(DatapointGetter)
						if ok {
							face := inter.GetDatapoint()
							if face == nil {
								return nil, nil
							}
							if face.Maximum == nil {
								return nil, nil
							}
							return face.GetMaximum(), nil
						}
						return nil, fmt.Errorf("field Maximum not resolved")
					},
				},
				"Minimum": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Float,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Datapoint)
						if ok {
							if obj.Minimum == nil {
								return nil, nil
							}
							return obj.GetMinimum(), nil
						}
						inter, ok := p.Source.(DatapointGetter)
						if ok {
							face := inter.GetDatapoint()
							if face == nil {
								return nil, nil
							}
							if face.Minimum == nil {
								return nil, nil
							}
							return face.GetMinimum(), nil
						}
						return nil, fmt.Errorf("field Minimum not resolved")
					},
				},
				"SampleCount": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Float,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Datapoint)
						if ok {
							if obj.SampleCount == nil {
								return nil, nil
							}
							return obj.GetSampleCount(), nil
						}
						inter, ok := p.Source.(DatapointGetter)
						if ok {
							face := inter.GetDatapoint()
							if face == nil {
								return nil, nil
							}
							if face.SampleCount == nil {
								return nil, nil
							}
							return face.GetSampleCount(), nil
						}
						return nil, fmt.Errorf("field SampleCount not resolved")
					},
				},
				"Sum": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Float,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Datapoint)
						if ok {
							if obj.Sum == nil {
								return nil, nil
							}
							return obj.GetSum(), nil
						}
						inter, ok := p.Source.(DatapointGetter)
						if ok {
							face := inter.GetDatapoint()
							if face == nil {
								return nil, nil
							}
							if face.Sum == nil {
								return nil, nil
							}
							return face.GetSum(), nil
						}
						return nil, fmt.Errorf("field Sum not resolved")
					},
				},
				"Timestamp": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Datapoint)
						if ok {
							if obj.Timestamp == nil {
								return nil, nil
							}
							return obj.GetTimestamp(), nil
						}
						inter, ok := p.Source.(DatapointGetter)
						if ok {
							face := inter.GetDatapoint()
							if face == nil {
								return nil, nil
							}
							if face.Timestamp == nil {
								return nil, nil
							}
							return face.GetTimestamp(), nil
						}
						return nil, fmt.Errorf("field Timestamp not resolved")
					},
				},
				"Unit": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Datapoint)
						if ok {
							if obj.Unit == nil {
								return nil, nil
							}
							return obj.GetUnit(), nil
						}
						inter, ok := p.Source.(DatapointGetter)
						if ok {
							face := inter.GetDatapoint()
							if face == nil {
								return nil, nil
							}
							if face.Unit == nil {
								return nil, nil
							}
							return face.GetUnit(), nil
						}
						return nil, fmt.Errorf("field Unit not resolved")
					},
				},
			}
		}),
	})
	GraphQLDimensionType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "cloudwatchDimension",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"Name": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Dimension)
						if ok {
							if obj.Name == nil {
								return nil, nil
							}
							return obj.GetName(), nil
						}
						inter, ok := p.Source.(DimensionGetter)
						if ok {
							face := inter.GetDimension()
							if face == nil {
								return nil, nil
							}
							if face.Name == nil {
								return nil, nil
							}
							return face.GetName(), nil
						}
						return nil, fmt.Errorf("field Name not resolved")
					},
				},
				"Value": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Dimension)
						if ok {
							if obj.Value == nil {
								return nil, nil
							}
							return obj.GetValue(), nil
						}
						inter, ok := p.Source.(DimensionGetter)
						if ok {
							face := inter.GetDimension()
							if face == nil {
								return nil, nil
							}
							if face.Value == nil {
								return nil, nil
							}
							return face.GetValue(), nil
						}
						return nil, fmt.Errorf("field Value not resolved")
					},
				},
			}
		}),
	})
	GraphQLDimensionFilterType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "cloudwatchDimensionFilter",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"Name": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*DimensionFilter)
						if ok {
							if obj.Name == nil {
								return nil, nil
							}
							return obj.GetName(), nil
						}
						inter, ok := p.Source.(DimensionFilterGetter)
						if ok {
							face := inter.GetDimensionFilter()
							if face == nil {
								return nil, nil
							}
							if face.Name == nil {
								return nil, nil
							}
							return face.GetName(), nil
						}
						return nil, fmt.Errorf("field Name not resolved")
					},
				},
				"Value": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*DimensionFilter)
						if ok {
							if obj.Value == nil {
								return nil, nil
							}
							return obj.GetValue(), nil
						}
						inter, ok := p.Source.(DimensionFilterGetter)
						if ok {
							face := inter.GetDimensionFilter()
							if face == nil {
								return nil, nil
							}
							if face.Value == nil {
								return nil, nil
							}
							return face.GetValue(), nil
						}
						return nil, fmt.Errorf("field Value not resolved")
					},
				},
			}
		}),
	})
	GraphQLGetMetricStatisticsInputType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "cloudwatchGetMetricStatisticsInput",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"Dimensions": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(GraphQLDimensionType),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*GetMetricStatisticsInput)
						if ok {
							return obj.Dimensions, nil
						}
						inter, ok := p.Source.(GetMetricStatisticsInputGetter)
						if ok {
							face := inter.GetGetMetricStatisticsInput()
							if face == nil {
								return nil, nil
							}
							return face.Dimensions, nil
						}
						return nil, fmt.Errorf("field Dimensions not resolved")
					},
				},
				"EndTime": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*GetMetricStatisticsInput)
						if ok {
							if obj.EndTime == nil {
								return nil, nil
							}
							return obj.GetEndTime(), nil
						}
						inter, ok := p.Source.(GetMetricStatisticsInputGetter)
						if ok {
							face := inter.GetGetMetricStatisticsInput()
							if face == nil {
								return nil, nil
							}
							if face.EndTime == nil {
								return nil, nil
							}
							return face.GetEndTime(), nil
						}
						return nil, fmt.Errorf("field EndTime not resolved")
					},
				},
				"MetricName": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*GetMetricStatisticsInput)
						if ok {
							if obj.MetricName == nil {
								return nil, nil
							}
							return obj.GetMetricName(), nil
						}
						inter, ok := p.Source.(GetMetricStatisticsInputGetter)
						if ok {
							face := inter.GetGetMetricStatisticsInput()
							if face == nil {
								return nil, nil
							}
							if face.MetricName == nil {
								return nil, nil
							}
							return face.GetMetricName(), nil
						}
						return nil, fmt.Errorf("field MetricName not resolved")
					},
				},
				"Namespace": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*GetMetricStatisticsInput)
						if ok {
							if obj.Namespace == nil {
								return nil, nil
							}
							return obj.GetNamespace(), nil
						}
						inter, ok := p.Source.(GetMetricStatisticsInputGetter)
						if ok {
							face := inter.GetGetMetricStatisticsInput()
							if face == nil {
								return nil, nil
							}
							if face.Namespace == nil {
								return nil, nil
							}
							return face.GetNamespace(), nil
						}
						return nil, fmt.Errorf("field Namespace not resolved")
					},
				},
				"Period": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*GetMetricStatisticsInput)
						if ok {
							if obj.Period == nil {
								return nil, nil
							}
							return obj.GetPeriod(), nil
						}
						inter, ok := p.Source.(GetMetricStatisticsInputGetter)
						if ok {
							face := inter.GetGetMetricStatisticsInput()
							if face == nil {
								return nil, nil
							}
							if face.Period == nil {
								return nil, nil
							}
							return face.GetPeriod(), nil
						}
						return nil, fmt.Errorf("field Period not resolved")
					},
				},
				"StartTime": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*GetMetricStatisticsInput)
						if ok {
							if obj.StartTime == nil {
								return nil, nil
							}
							return obj.GetStartTime(), nil
						}
						inter, ok := p.Source.(GetMetricStatisticsInputGetter)
						if ok {
							face := inter.GetGetMetricStatisticsInput()
							if face == nil {
								return nil, nil
							}
							if face.StartTime == nil {
								return nil, nil
							}
							return face.GetStartTime(), nil
						}
						return nil, fmt.Errorf("field StartTime not resolved")
					},
				},
				"Statistics": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(github_com_graphql_go_graphql.String),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*GetMetricStatisticsInput)
						if ok {
							return obj.Statistics, nil
						}
						inter, ok := p.Source.(GetMetricStatisticsInputGetter)
						if ok {
							face := inter.GetGetMetricStatisticsInput()
							if face == nil {
								return nil, nil
							}
							return face.Statistics, nil
						}
						return nil, fmt.Errorf("field Statistics not resolved")
					},
				},
				"Unit": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*GetMetricStatisticsInput)
						if ok {
							if obj.Unit == nil {
								return nil, nil
							}
							return obj.GetUnit(), nil
						}
						inter, ok := p.Source.(GetMetricStatisticsInputGetter)
						if ok {
							face := inter.GetGetMetricStatisticsInput()
							if face == nil {
								return nil, nil
							}
							if face.Unit == nil {
								return nil, nil
							}
							return face.GetUnit(), nil
						}
						return nil, fmt.Errorf("field Unit not resolved")
					},
				},
			}
		}),
	})
	GraphQLGetMetricStatisticsOutputType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "cloudwatchGetMetricStatisticsOutput",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"Datapoints": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(GraphQLDatapointType),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*GetMetricStatisticsOutput)
						if ok {
							return obj.Datapoints, nil
						}
						inter, ok := p.Source.(GetMetricStatisticsOutputGetter)
						if ok {
							face := inter.GetGetMetricStatisticsOutput()
							if face == nil {
								return nil, nil
							}
							return face.Datapoints, nil
						}
						return nil, fmt.Errorf("field Datapoints not resolved")
					},
				},
				"Label": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*GetMetricStatisticsOutput)
						if ok {
							if obj.Label == nil {
								return nil, nil
							}
							return obj.GetLabel(), nil
						}
						inter, ok := p.Source.(GetMetricStatisticsOutputGetter)
						if ok {
							face := inter.GetGetMetricStatisticsOutput()
							if face == nil {
								return nil, nil
							}
							if face.Label == nil {
								return nil, nil
							}
							return face.GetLabel(), nil
						}
						return nil, fmt.Errorf("field Label not resolved")
					},
				},
			}
		}),
	})
	GraphQLListMetricsInputType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "cloudwatchListMetricsInput",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"Dimensions": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(GraphQLDimensionFilterType),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*ListMetricsInput)
						if ok {
							return obj.Dimensions, nil
						}
						inter, ok := p.Source.(ListMetricsInputGetter)
						if ok {
							face := inter.GetListMetricsInput()
							if face == nil {
								return nil, nil
							}
							return face.Dimensions, nil
						}
						return nil, fmt.Errorf("field Dimensions not resolved")
					},
				},
				"MetricName": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*ListMetricsInput)
						if ok {
							if obj.MetricName == nil {
								return nil, nil
							}
							return obj.GetMetricName(), nil
						}
						inter, ok := p.Source.(ListMetricsInputGetter)
						if ok {
							face := inter.GetListMetricsInput()
							if face == nil {
								return nil, nil
							}
							if face.MetricName == nil {
								return nil, nil
							}
							return face.GetMetricName(), nil
						}
						return nil, fmt.Errorf("field MetricName not resolved")
					},
				},
				"Namespace": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*ListMetricsInput)
						if ok {
							if obj.Namespace == nil {
								return nil, nil
							}
							return obj.GetNamespace(), nil
						}
						inter, ok := p.Source.(ListMetricsInputGetter)
						if ok {
							face := inter.GetListMetricsInput()
							if face == nil {
								return nil, nil
							}
							if face.Namespace == nil {
								return nil, nil
							}
							return face.GetNamespace(), nil
						}
						return nil, fmt.Errorf("field Namespace not resolved")
					},
				},
				"NextToken": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*ListMetricsInput)
						if ok {
							if obj.NextToken == nil {
								return nil, nil
							}
							return obj.GetNextToken(), nil
						}
						inter, ok := p.Source.(ListMetricsInputGetter)
						if ok {
							face := inter.GetListMetricsInput()
							if face == nil {
								return nil, nil
							}
							if face.NextToken == nil {
								return nil, nil
							}
							return face.GetNextToken(), nil
						}
						return nil, fmt.Errorf("field NextToken not resolved")
					},
				},
			}
		}),
	})
	GraphQLListMetricsOutputType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "cloudwatchListMetricsOutput",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"Metrics": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(GraphQLMetricType),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*ListMetricsOutput)
						if ok {
							return obj.Metrics, nil
						}
						inter, ok := p.Source.(ListMetricsOutputGetter)
						if ok {
							face := inter.GetListMetricsOutput()
							if face == nil {
								return nil, nil
							}
							return face.Metrics, nil
						}
						return nil, fmt.Errorf("field Metrics not resolved")
					},
				},
				"NextToken": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*ListMetricsOutput)
						if ok {
							if obj.NextToken == nil {
								return nil, nil
							}
							return obj.GetNextToken(), nil
						}
						inter, ok := p.Source.(ListMetricsOutputGetter)
						if ok {
							face := inter.GetListMetricsOutput()
							if face == nil {
								return nil, nil
							}
							if face.NextToken == nil {
								return nil, nil
							}
							return face.GetNextToken(), nil
						}
						return nil, fmt.Errorf("field NextToken not resolved")
					},
				},
			}
		}),
	})
	GraphQLMetricType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "cloudwatchMetric",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"Dimensions": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(GraphQLDimensionType),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Metric)
						if ok {
							return obj.Dimensions, nil
						}
						inter, ok := p.Source.(MetricGetter)
						if ok {
							face := inter.GetMetric()
							if face == nil {
								return nil, nil
							}
							return face.Dimensions, nil
						}
						return nil, fmt.Errorf("field Dimensions not resolved")
					},
				},
				"MetricName": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Metric)
						if ok {
							if obj.MetricName == nil {
								return nil, nil
							}
							return obj.GetMetricName(), nil
						}
						inter, ok := p.Source.(MetricGetter)
						if ok {
							face := inter.GetMetric()
							if face == nil {
								return nil, nil
							}
							if face.MetricName == nil {
								return nil, nil
							}
							return face.GetMetricName(), nil
						}
						return nil, fmt.Errorf("field MetricName not resolved")
					},
				},
				"Namespace": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Metric)
						if ok {
							if obj.Namespace == nil {
								return nil, nil
							}
							return obj.GetNamespace(), nil
						}
						inter, ok := p.Source.(MetricGetter)
						if ok {
							face := inter.GetMetric()
							if face == nil {
								return nil, nil
							}
							if face.Namespace == nil {
								return nil, nil
							}
							return face.GetNamespace(), nil
						}
						return nil, fmt.Errorf("field Namespace not resolved")
					},
				},
			}
		}),
	})
}
func NewPopulatedDatapoint(r randyTypes, easy bool) *Datapoint {
	this := &Datapoint{}
	if r.Intn(10) != 0 {
		v1 := float64(r.Float64())
		if r.Intn(2) == 0 {
			v1 *= -1
		}
		this.Average = &v1
	}
	if r.Intn(10) != 0 {
		v2 := float64(r.Float64())
		if r.Intn(2) == 0 {
			v2 *= -1
		}
		this.Maximum = &v2
	}
	if r.Intn(10) != 0 {
		v3 := float64(r.Float64())
		if r.Intn(2) == 0 {
			v3 *= -1
		}
		this.Minimum = &v3
	}
	if r.Intn(10) != 0 {
		v4 := float64(r.Float64())
		if r.Intn(2) == 0 {
			v4 *= -1
		}
		this.SampleCount = &v4
	}
	if r.Intn(10) != 0 {
		v5 := float64(r.Float64())
		if r.Intn(2) == 0 {
			v5 *= -1
		}
		this.Sum = &v5
	}
	if r.Intn(10) != 0 {
		v6 := int64(r.Int63())
		if r.Intn(2) == 0 {
			v6 *= -1
		}
		this.Timestamp = &v6
	}
	if r.Intn(10) != 0 {
		v7 := randStringTypes(r)
		this.Unit = &v7
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTypes(r, 9)
	}
	return this
}

func NewPopulatedDimension(r randyTypes, easy bool) *Dimension {
	this := &Dimension{}
	if r.Intn(10) != 0 {
		v8 := randStringTypes(r)
		this.Name = &v8
	}
	if r.Intn(10) != 0 {
		v9 := randStringTypes(r)
		this.Value = &v9
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTypes(r, 4)
	}
	return this
}

func NewPopulatedDimensionFilter(r randyTypes, easy bool) *DimensionFilter {
	this := &DimensionFilter{}
	if r.Intn(10) != 0 {
		v10 := randStringTypes(r)
		this.Name = &v10
	}
	if r.Intn(10) != 0 {
		v11 := randStringTypes(r)
		this.Value = &v11
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTypes(r, 4)
	}
	return this
}

func NewPopulatedGetMetricStatisticsInput(r randyTypes, easy bool) *GetMetricStatisticsInput {
	this := &GetMetricStatisticsInput{}
	if r.Intn(10) != 0 {
		v12 := r.Intn(5)
		this.Dimensions = make([]*Dimension, v12)
		for i := 0; i < v12; i++ {
			this.Dimensions[i] = NewPopulatedDimension(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v13 := int64(r.Int63())
		if r.Intn(2) == 0 {
			v13 *= -1
		}
		this.EndTime = &v13
	}
	if r.Intn(10) != 0 {
		v14 := randStringTypes(r)
		this.MetricName = &v14
	}
	if r.Intn(10) != 0 {
		v15 := randStringTypes(r)
		this.Namespace = &v15
	}
	if r.Intn(10) != 0 {
		v16 := int64(r.Int63())
		if r.Intn(2) == 0 {
			v16 *= -1
		}
		this.Period = &v16
	}
	if r.Intn(10) != 0 {
		v17 := int64(r.Int63())
		if r.Intn(2) == 0 {
			v17 *= -1
		}
		this.StartTime = &v17
	}
	if r.Intn(10) != 0 {
		v18 := r.Intn(10)
		this.Statistics = make([]string, v18)
		for i := 0; i < v18; i++ {
			this.Statistics[i] = randStringTypes(r)
		}
	}
	if r.Intn(10) != 0 {
		v19 := randStringTypes(r)
		this.Unit = &v19
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTypes(r, 10)
	}
	return this
}

func NewPopulatedGetMetricStatisticsOutput(r randyTypes, easy bool) *GetMetricStatisticsOutput {
	this := &GetMetricStatisticsOutput{}
	if r.Intn(10) != 0 {
		v20 := r.Intn(5)
		this.Datapoints = make([]*Datapoint, v20)
		for i := 0; i < v20; i++ {
			this.Datapoints[i] = NewPopulatedDatapoint(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v21 := randStringTypes(r)
		this.Label = &v21
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTypes(r, 4)
	}
	return this
}

func NewPopulatedListMetricsInput(r randyTypes, easy bool) *ListMetricsInput {
	this := &ListMetricsInput{}
	if r.Intn(10) != 0 {
		v22 := r.Intn(5)
		this.Dimensions = make([]*DimensionFilter, v22)
		for i := 0; i < v22; i++ {
			this.Dimensions[i] = NewPopulatedDimensionFilter(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v23 := randStringTypes(r)
		this.MetricName = &v23
	}
	if r.Intn(10) != 0 {
		v24 := randStringTypes(r)
		this.Namespace = &v24
	}
	if r.Intn(10) != 0 {
		v25 := randStringTypes(r)
		this.NextToken = &v25
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTypes(r, 6)
	}
	return this
}

func NewPopulatedListMetricsOutput(r randyTypes, easy bool) *ListMetricsOutput {
	this := &ListMetricsOutput{}
	if r.Intn(10) != 0 {
		v26 := r.Intn(5)
		this.Metrics = make([]*Metric, v26)
		for i := 0; i < v26; i++ {
			this.Metrics[i] = NewPopulatedMetric(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v27 := randStringTypes(r)
		this.NextToken = &v27
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTypes(r, 4)
	}
	return this
}

func NewPopulatedMetric(r randyTypes, easy bool) *Metric {
	this := &Metric{}
	if r.Intn(10) != 0 {
		v28 := r.Intn(5)
		this.Dimensions = make([]*Dimension, v28)
		for i := 0; i < v28; i++ {
			this.Dimensions[i] = NewPopulatedDimension(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v29 := randStringTypes(r)
		this.MetricName = &v29
	}
	if r.Intn(10) != 0 {
		v30 := randStringTypes(r)
		this.Namespace = &v30
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTypes(r, 5)
	}
	return this
}

type randyTypes interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneTypes(r randyTypes) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringTypes(r randyTypes) string {
	v31 := r.Intn(100)
	tmps := make([]rune, v31)
	for i := 0; i < v31; i++ {
		tmps[i] = randUTF8RuneTypes(r)
	}
	return string(tmps)
}
func randUnrecognizedTypes(r randyTypes, maxFieldNumber int) (data []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		data = randFieldTypes(data, r, fieldNumber, wire)
	}
	return data
}
func randFieldTypes(data []byte, r randyTypes, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		data = encodeVarintPopulateTypes(data, uint64(key))
		v32 := r.Int63()
		if r.Intn(2) == 0 {
			v32 *= -1
		}
		data = encodeVarintPopulateTypes(data, uint64(v32))
	case 1:
		data = encodeVarintPopulateTypes(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		data = encodeVarintPopulateTypes(data, uint64(key))
		ll := r.Intn(100)
		data = encodeVarintPopulateTypes(data, uint64(ll))
		for j := 0; j < ll; j++ {
			data = append(data, byte(r.Intn(256)))
		}
	default:
		data = encodeVarintPopulateTypes(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return data
}
func encodeVarintPopulateTypes(data []byte, v uint64) []byte {
	for v >= 1<<7 {
		data = append(data, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	data = append(data, uint8(v))
	return data
}
